{"ast":null,"code":"'use strict';\n\nvar Potrace = require('./Potrace');\n\nvar Posterizer = require('./Posterizer');\n/**\r\n * Wrapper for Potrace that simplifies use down to one function call\r\n *\r\n * @param {string|Buffer|Jimp} file Source image, file path or {@link Jimp} instance\r\n * @param {Potrace~Options} [options]\r\n * @param {traceCallback} cb Callback function. Accepts 3 arguments: error, svg content and instance of {@link Potrace} (so it could be reused with different set of parameters)\r\n */\n\n\nfunction trace(file, options, cb) {\n  if (arguments.length === 2) {\n    cb = options;\n    options = {};\n  }\n\n  var potrace = new Potrace(options);\n  potrace.loadImage(file, function (err) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, potrace.getSVG(), potrace);\n  });\n}\n/**\r\n * Wrapper for Potrace that simplifies use down to one function call\r\n *\r\n * @param {string|Buffer|Jimp} file Source image, file path or {@link Jimp} instance\r\n * @param {Posterizer~Options} [options]\r\n * @param {posterizeCallback} cb Callback function. Accepts 3 arguments: error, svg content and instance of {@link Potrace} (so it could be reused with different set of parameters)\r\n */\n\n\nfunction posterize(file, options, cb) {\n  if (arguments.length === 2) {\n    cb = options;\n    options = {};\n  }\n\n  var posterizer = new Posterizer(options);\n  posterizer.loadImage(file, function (err) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, posterizer.getSVG(), posterizer);\n  });\n}\n\nmodule.exports = {\n  trace: trace,\n  posterize: posterize,\n  Potrace: Potrace,\n  Posterizer: Posterizer\n};\n/**\r\n * Callback for trace method\r\n * @callback traceCallback\r\n * @param {Error|null} err\r\n * @param {string} svg SVG document contents\r\n * @param {Potrace} [instance] Potrace class instance\r\n */\n\n/**\r\n * Callback for posterize method\r\n * @callback posterizeCallback\r\n * @param {Error|null} err\r\n * @param {string} svg SVG document contents\r\n * @param {Posterizer} [instance] Posterizer class instance\r\n */","map":{"version":3,"sources":["/Users/zakstratton/Documents/design-tool/node_modules/potrace/lib/index.js"],"names":["Potrace","require","Posterizer","trace","file","options","cb","arguments","length","potrace","loadImage","err","getSVG","posterize","posterizer","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;AAEA;;;;;;;;;AAOA,SAASE,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8BC,EAA9B,EAAkC;AAChC,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,EAAE,GAAGD,OAAL;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAII,OAAO,GAAG,IAAIT,OAAJ,CAAYK,OAAZ,CAAd;AAEAI,EAAAA,OAAO,CAACC,SAAR,CAAkBN,IAAlB,EAAwB,UAASO,GAAT,EAAc;AACpC,QAAIA,GAAJ,EAAS;AAAE,aAAOL,EAAE,CAACK,GAAD,CAAT;AAAiB;;AAC5BL,IAAAA,EAAE,CAAC,IAAD,EAAOG,OAAO,CAACG,MAAR,EAAP,EAAyBH,OAAzB,CAAF;AACD,GAHD;AAID;AAED;;;;;;;;;AAOA,SAASI,SAAT,CAAmBT,IAAnB,EAAyBC,OAAzB,EAAkCC,EAAlC,EAAsC;AACpC,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,EAAE,GAAGD,OAAL;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIS,UAAU,GAAG,IAAIZ,UAAJ,CAAeG,OAAf,CAAjB;AAEAS,EAAAA,UAAU,CAACJ,SAAX,CAAqBN,IAArB,EAA2B,UAASO,GAAT,EAAc;AACvC,QAAIA,GAAJ,EAAS;AAAE,aAAOL,EAAE,CAACK,GAAD,CAAT;AAAiB;;AAC5BL,IAAAA,EAAE,CAAC,IAAD,EAAOQ,UAAU,CAACF,MAAX,EAAP,EAA4BE,UAA5B,CAAF;AACD,GAHD;AAID;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,KAAK,EAAEA,KADQ;AAEfU,EAAAA,SAAS,EAAEA,SAFI;AAGfb,EAAAA,OAAO,EAAEA,OAHM;AAIfE,EAAAA,UAAU,EAAEA;AAJG,CAAjB;AAOA;;;;;;;;AAQA","sourcesContent":["'use strict';\r\n\r\nvar Potrace = require('./Potrace');\r\nvar Posterizer = require('./Posterizer');\r\n\r\n/**\r\n * Wrapper for Potrace that simplifies use down to one function call\r\n *\r\n * @param {string|Buffer|Jimp} file Source image, file path or {@link Jimp} instance\r\n * @param {Potrace~Options} [options]\r\n * @param {traceCallback} cb Callback function. Accepts 3 arguments: error, svg content and instance of {@link Potrace} (so it could be reused with different set of parameters)\r\n */\r\nfunction trace(file, options, cb) {\r\n  if (arguments.length === 2) {\r\n    cb = options;\r\n    options = {};\r\n  }\r\n\r\n  var potrace = new Potrace(options);\r\n\r\n  potrace.loadImage(file, function(err) {\r\n    if (err) { return cb(err); }\r\n    cb(null, potrace.getSVG(), potrace);\r\n  });\r\n}\r\n\r\n/**\r\n * Wrapper for Potrace that simplifies use down to one function call\r\n *\r\n * @param {string|Buffer|Jimp} file Source image, file path or {@link Jimp} instance\r\n * @param {Posterizer~Options} [options]\r\n * @param {posterizeCallback} cb Callback function. Accepts 3 arguments: error, svg content and instance of {@link Potrace} (so it could be reused with different set of parameters)\r\n */\r\nfunction posterize(file, options, cb) {\r\n  if (arguments.length === 2) {\r\n    cb = options;\r\n    options = {};\r\n  }\r\n\r\n  var posterizer = new Posterizer(options);\r\n\r\n  posterizer.loadImage(file, function(err) {\r\n    if (err) { return cb(err); }\r\n    cb(null, posterizer.getSVG(), posterizer);\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  trace: trace,\r\n  posterize: posterize,\r\n  Potrace: Potrace,\r\n  Posterizer: Posterizer\r\n};\r\n\r\n/**\r\n * Callback for trace method\r\n * @callback traceCallback\r\n * @param {Error|null} err\r\n * @param {string} svg SVG document contents\r\n * @param {Potrace} [instance] Potrace class instance\r\n */\r\n\r\n/**\r\n * Callback for posterize method\r\n * @callback posterizeCallback\r\n * @param {Error|null} err\r\n * @param {string} svg SVG document contents\r\n * @param {Posterizer} [instance] Posterizer class instance\r\n */"]},"metadata":{},"sourceType":"script"}