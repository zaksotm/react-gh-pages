{"ast":null,"code":"'use strict';\n\nvar Point = require('./Point');\n\nvar utils = require('../utils');\n\nvar Histogram;\n/**\r\n * Represents a bitmap where each pixel can be a number in range of 0..255\r\n * Used internally to store luminance data.\r\n *\r\n * @param {Number} w\r\n * @param {Number} h\r\n * @constructor\r\n */\n\nfunction Bitmap(w, h) {\n  this._histogram = null;\n  this.width = w;\n  this.height = h;\n  this.size = w * h;\n  this.arrayBuffer = new ArrayBuffer(this.size);\n  this.data = new Uint8Array(this.arrayBuffer);\n}\n\nmodule.exports = Bitmap;\nHistogram = require('./Histogram');\nBitmap.prototype = {\n  /**\r\n   * Returns pixel value\r\n   *\r\n   * @param {Number|Point} x - index, point or x\r\n   * @param {Number} [y]\r\n   */\n  getValueAt: function (x, y) {\n    var index = typeof x === 'number' && typeof y !== 'number' ? x : this.pointToIndex(x, y);\n    return this.data[index];\n  },\n\n  /**\r\n   * Converts {@link Point} to index value\r\n   *\r\n   * @param {Number} index\r\n   * @returns {Point}\r\n   */\n  indexToPoint: function (index) {\n    var point = new Point();\n\n    if (utils.between(index, 0, this.size)) {\n      point.y = Math.floor(index / this.width);\n      point.x = index - point.y * this.width;\n    } else {\n      point.x = -1;\n      point.y = -1;\n    }\n\n    return point;\n  },\n\n  /**\r\n   * Calculates index for point or coordinate pair\r\n   *\r\n   * @param {Number|Point} pointOrX\r\n   * @param {Number} [y]\r\n   * @returns {Number}\r\n   */\n  pointToIndex: function (pointOrX, y) {\n    var _x = pointOrX,\n        _y = y;\n\n    if (pointOrX instanceof Point) {\n      _x = pointOrX.x;\n      _y = pointOrX.y;\n    }\n\n    if (!utils.between(_x, 0, this.width) || !utils.between(_y, 0, this.height)) {\n      return -1;\n    }\n\n    return this.width * _y + _x;\n  },\n\n  /**\r\n   * Makes a copy of current bitmap\r\n   *\r\n   * @param {Function} [iterator] optional callback, used for processing pixel value. Accepted arguments: value, index\r\n   * @returns {Bitmap}\r\n   */\n  copy: function (iterator) {\n    var bm = new Bitmap(this.width, this.height),\n        iteratorPresent = typeof iterator === 'function',\n        i;\n\n    for (i = 0; i < this.size; i++) {\n      bm.data[i] = iteratorPresent ? iterator(this.data[i], i) : this.data[i];\n    }\n\n    return bm;\n  },\n  histogram: function () {\n    var Histogram = require('./Histogram');\n\n    if (this._histogram) {\n      return this._histogram;\n    }\n\n    this._histogram = new Histogram(this);\n    return this._histogram;\n  }\n};","map":{"version":3,"sources":["/Users/zakstratton/Documents/design-tool/node_modules/potrace/lib/types/Bitmap.js"],"names":["Point","require","utils","Histogram","Bitmap","w","h","_histogram","width","height","size","arrayBuffer","ArrayBuffer","data","Uint8Array","module","exports","prototype","getValueAt","x","y","index","pointToIndex","indexToPoint","point","between","Math","floor","pointOrX","_x","_y","copy","iterator","bm","iteratorPresent","i","histogram"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar Point = require('./Point');\r\nvar utils = require('../utils');\r\nvar Histogram;\r\n\r\n/**\r\n * Represents a bitmap where each pixel can be a number in range of 0..255\r\n * Used internally to store luminance data.\r\n *\r\n * @param {Number} w\r\n * @param {Number} h\r\n * @constructor\r\n */\r\nfunction Bitmap(w, h) {\r\n  this._histogram = null;\r\n\r\n  this.width = w;\r\n  this.height = h;\r\n  this.size = w * h;\r\n  this.arrayBuffer = new ArrayBuffer(this.size);\r\n  this.data = new Uint8Array(this.arrayBuffer);\r\n}\r\n\r\nmodule.exports = Bitmap;\r\nHistogram = require('./Histogram');\r\n\r\nBitmap.prototype = {\r\n  /**\r\n   * Returns pixel value\r\n   *\r\n   * @param {Number|Point} x - index, point or x\r\n   * @param {Number} [y]\r\n   */\r\n  getValueAt: function(x, y) {\r\n    var index = (typeof x === 'number' && typeof y !== 'number') ? x : this.pointToIndex(x, y);\r\n    return this.data[index];\r\n  },\r\n\r\n  /**\r\n   * Converts {@link Point} to index value\r\n   *\r\n   * @param {Number} index\r\n   * @returns {Point}\r\n   */\r\n  indexToPoint: function(index) {\r\n    var point = new Point();\r\n\r\n\t  if (utils.between(index, 0, this.size)) {\r\n      point.y = Math.floor(index / this.width);\r\n      point.x = index - point.y * this.width;\r\n    } else {\r\n      point.x = -1;\r\n      point.y = -1;\r\n    }\r\n\r\n    return point;\r\n  },\r\n\r\n  /**\r\n   * Calculates index for point or coordinate pair\r\n   *\r\n   * @param {Number|Point} pointOrX\r\n   * @param {Number} [y]\r\n   * @returns {Number}\r\n   */\r\n  pointToIndex: function(pointOrX, y) {\r\n    var _x = pointOrX,\r\n        _y = y;\r\n\r\n    if (pointOrX instanceof Point) {\r\n      _x = pointOrX.x;\r\n      _y = pointOrX.y;\r\n    }\r\n\r\n    if (!utils.between(_x, 0, this.width) || !utils.between(_y, 0, this.height)) {\r\n      return -1;\r\n    }\r\n\r\n    return this.width * _y + _x;\r\n  },\r\n\r\n  /**\r\n   * Makes a copy of current bitmap\r\n   *\r\n   * @param {Function} [iterator] optional callback, used for processing pixel value. Accepted arguments: value, index\r\n   * @returns {Bitmap}\r\n   */\r\n  copy: function(iterator) {\r\n    var bm = new Bitmap(this.width, this.height),\r\n        iteratorPresent = typeof iterator === 'function',\r\n        i;\r\n\r\n    for (i = 0; i < this.size; i++) {\r\n      bm.data[i] = iteratorPresent ? iterator(this.data[i], i) : this.data[i];\r\n    }\r\n\r\n    return bm;\r\n  },\r\n\r\n  histogram: function() {\r\n    var Histogram = require('./Histogram');\r\n\r\n    if (this._histogram) {\r\n      return this._histogram;\r\n    }\r\n\r\n    this._histogram = new Histogram(this);\r\n    return this._histogram;\r\n  }\r\n};"]},"metadata":{},"sourceType":"script"}