{"ast":null,"code":"import invariant from 'invariant';\nexport const concatTwoColorMatrices = (matB, matA) => {\n  invariant(Array.isArray(matB) && matB.length === 20, `Color matrix matB should be an array with 20 elements.`);\n  invariant(Array.isArray(matA) && matA.length === 20, `Color matrix matA should be an array with 20 elements.`);\n  const tmp = Array(20);\n  let index = 0;\n\n  for (let j = 0; j < 20; j += 5) {\n    for (let i = 0; i < 4; i++) {\n      tmp[index++] = matA[j + 0] * matB[i + 0] + matA[j + 1] * matB[i + 5] + matA[j + 2] * matB[i + 10] + matA[j + 3] * matB[i + 15];\n    }\n\n    tmp[index++] = matA[j + 0] * matB[4] + matA[j + 1] * matB[9] + matA[j + 2] * matB[14] + matA[j + 3] * matB[19] + matA[j + 4];\n  }\n\n  return tmp;\n};\nexport const concatColorMatrices = matrices => {\n  invariant(Array.isArray(matrices) && matrices.length > 0, `Matrices should be an array of non zero length.`);\n  return matrices.reduce(concatTwoColorMatrices);\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,WAAtB;AASA,OAAO,MAAM,sBAAsB,GAAG,CAAC,IAAD,EAAe,IAAf,KAA+B;AACnE,EAAA,SAAS,CACP,KAAK,CAAC,OAAN,CAAc,IAAd,KAAuB,IAAI,CAAC,MAAL,KAAgB,EADhC,EAEP,wDAFO,CAAT;AAKA,EAAA,SAAS,CACP,KAAK,CAAC,OAAN,CAAc,IAAd,KAAuB,IAAI,CAAC,MAAL,KAAgB,EADhC,EAEP,wDAFO,CAAT;AAKA,QAAM,GAAG,GAAG,KAAK,CAAC,EAAD,CAAjB;AAEA,MAAI,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,IAAI,CAA7B,EAAgC;AAC9B,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,MAAA,GAAG,CAAC,KAAK,EAAN,CAAH,GAAe,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAI,CAAC,CAAC,GAAG,CAAL,CAAlB,GAA4B,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAI,CAAC,CAAC,GAAG,CAAL,CAA9C,GACb,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAI,CAAC,CAAC,GAAG,EAAL,CADL,GACgB,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAI,CAAC,CAAC,GAAG,EAAL,CADjD;AAED;;AACD,IAAA,GAAG,CAAC,KAAK,EAAN,CAAH,GAAe,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAI,CAAC,CAAD,CAAlB,GAAwB,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAI,CAAC,CAAD,CAA1C,GACb,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAI,CAAC,EAAD,CADL,GACY,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAI,CAAC,EAAD,CAD9B,GACqC,IAAI,CAAC,CAAC,GAAG,CAAL,CADxD;AAED;;AAED,SAAO,GAAP;AACD,CAxBM;AA0BP,OAAO,MAAM,mBAAmB,GAAI,QAAD,IAAoC;AACrE,EAAA,SAAS,CACP,KAAK,CAAC,OAAN,CAAc,QAAd,KAA2B,QAAQ,CAAC,MAAT,GAAkB,CADtC,EAEP,iDAFO,CAAT;AAKA,SAAO,QAAQ,CAAC,MAAT,CAAgB,sBAAhB,CAAP;AACD,CAPM","sourceRoot":"","sourcesContent":["import invariant from 'invariant';\nexport const concatTwoColorMatrices = (matB, matA) => {\n    invariant(Array.isArray(matB) && matB.length === 20, `Color matrix matB should be an array with 20 elements.`);\n    invariant(Array.isArray(matA) && matA.length === 20, `Color matrix matA should be an array with 20 elements.`);\n    const tmp = Array(20);\n    let index = 0;\n    for (let j = 0; j < 20; j += 5) {\n        for (let i = 0; i < 4; i++) {\n            tmp[index++] = matA[j + 0] * matB[i + 0] + matA[j + 1] * matB[i + 5] +\n                matA[j + 2] * matB[i + 10] + matA[j + 3] * matB[i + 15];\n        }\n        tmp[index++] = matA[j + 0] * matB[4] + matA[j + 1] * matB[9] +\n            matA[j + 2] * matB[14] + matA[j + 3] * matB[19] + matA[j + 4];\n    }\n    return tmp;\n};\nexport const concatColorMatrices = (matrices) => {\n    invariant(Array.isArray(matrices) && matrices.length > 0, `Matrices should be an array of non zero length.`);\n    return matrices.reduce(concatTwoColorMatrices);\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}