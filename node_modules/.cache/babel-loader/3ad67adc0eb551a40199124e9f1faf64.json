{"ast":null,"code":"'use strict';\n\nvar Jimp = require('jimp');\n\nvar Bitmap = require('./types/Bitmap');\n\nvar Curve = require('./types/Curve');\n\nvar Point = require('./types/Point');\n\nvar Path = require('./types/Path');\n\nvar Quad = require('./types/Quad');\n\nvar Sum = require('./types/Sum');\n\nvar Opti = require('./types/Opti');\n\nvar utils = require('./utils');\n/**\r\n * Potrace class\r\n *\r\n * @param {Potrace~Options} [options]\r\n * @constructor\r\n */\n\n\nfunction Potrace(options) {\n  this._luminanceData = null;\n  this._pathlist = [];\n  this._imageLoadingIdentifier = null;\n  this._imageLoaded = false;\n  this._processed = false;\n  this._params = {\n    turnPolicy: Potrace.TURNPOLICY_MINORITY,\n    turdSize: 2,\n    alphaMax: 1,\n    optCurve: true,\n    optTolerance: 0.2,\n    threshold: Potrace.THRESHOLD_AUTO,\n    blackOnWhite: true,\n    color: Potrace.COLOR_AUTO,\n    background: Potrace.COLOR_TRANSPARENT\n  };\n\n  if (options) {\n    this.setParameters(options);\n  }\n}\n\nPotrace.COLOR_AUTO = 'auto';\nPotrace.COLOR_TRANSPARENT = 'transparent';\nPotrace.THRESHOLD_AUTO = -1;\nPotrace.TURNPOLICY_BLACK = 'black';\nPotrace.TURNPOLICY_WHITE = 'white';\nPotrace.TURNPOLICY_LEFT = 'left';\nPotrace.TURNPOLICY_RIGHT = 'right';\nPotrace.TURNPOLICY_MINORITY = 'minority';\nPotrace.TURNPOLICY_MAJORITY = 'majority';\nvar SUPPORTED_TURNPOLICY_VALUES = [Potrace.TURNPOLICY_BLACK, Potrace.TURNPOLICY_WHITE, Potrace.TURNPOLICY_LEFT, Potrace.TURNPOLICY_RIGHT, Potrace.TURNPOLICY_MINORITY, Potrace.TURNPOLICY_MAJORITY];\nPotrace.prototype = {\n  /**\r\n   * Creating a new {@link Path} for every group of black pixels.\r\n   * @private\r\n   */\n  _bmToPathlist: function () {\n    var self = this,\n        threshold = this._params.threshold,\n        blackOnWhite = this._params.blackOnWhite,\n        blackMap,\n        currentPoint = new Point(0, 0),\n        path;\n\n    if (threshold === Potrace.THRESHOLD_AUTO) {\n      threshold = this._luminanceData.histogram().autoThreshold() || 128;\n    }\n\n    blackMap = this._luminanceData.copy(function (lum) {\n      var pastTheThreshold = blackOnWhite ? lum > threshold : lum < threshold;\n      return pastTheThreshold ? 0 : 1;\n    });\n    /**\r\n     * finds next black pixel of the image\r\n     *\r\n     * @param {Point} point\r\n     * @returns {boolean}\r\n     * @private\r\n     */\n\n    function findNext(point) {\n      var i = blackMap.pointToIndex(point);\n\n      while (i < blackMap.size && blackMap.data[i] !== 1) {\n        i++;\n      }\n\n      return i < blackMap.size && blackMap.indexToPoint(i);\n    }\n\n    function majority(x, y) {\n      var i, a, ct;\n\n      for (i = 2; i < 5; i++) {\n        ct = 0;\n\n        for (a = -i + 1; a <= i - 1; a++) {\n          ct += blackMap.getValueAt(x + a, y + i - 1) ? 1 : -1;\n          ct += blackMap.getValueAt(x + i - 1, y + a - 1) ? 1 : -1;\n          ct += blackMap.getValueAt(x + a - 1, y - i) ? 1 : -1;\n          ct += blackMap.getValueAt(x - i, y + a) ? 1 : -1;\n        }\n\n        if (ct > 0) {\n          return 1;\n        } else if (ct < 0) {\n          return 0;\n        }\n      }\n\n      return 0;\n    }\n\n    function findPath(point) {\n      var path = new Path(),\n          x = point.x,\n          y = point.y,\n          dirx = 0,\n          diry = 1,\n          tmp;\n      path.sign = blackMap.getValueAt(point.x, point.y) ? \"+\" : \"-\";\n\n      while (1) {\n        path.pt.push(new Point(x, y));\n        if (x > path.maxX) path.maxX = x;\n        if (x < path.minX) path.minX = x;\n        if (y > path.maxY) path.maxY = y;\n        if (y < path.minY) path.minY = y;\n        path.len++;\n        x += dirx;\n        y += diry;\n        path.area -= x * diry;\n        if (x === point.x && y === point.y) break;\n        var l = blackMap.getValueAt(x + (dirx + diry - 1) / 2, y + (diry - dirx - 1) / 2);\n        var r = blackMap.getValueAt(x + (dirx - diry - 1) / 2, y + (diry + dirx - 1) / 2);\n\n        if (r && !l) {\n          if (self._params.turnPolicy === \"right\" || self._params.turnPolicy === \"black\" && path.sign === '+' || self._params.turnPolicy === \"white\" && path.sign === '-' || self._params.turnPolicy === \"majority\" && majority(x, y) || self._params.turnPolicy === \"minority\" && !majority(x, y)) {\n            tmp = dirx;\n            dirx = -diry;\n            diry = tmp;\n          } else {\n            tmp = dirx;\n            dirx = diry;\n            diry = -tmp;\n          }\n        } else if (r) {\n          tmp = dirx;\n          dirx = -diry;\n          diry = tmp;\n        } else if (!l) {\n          tmp = dirx;\n          dirx = diry;\n          diry = -tmp;\n        }\n      }\n\n      return path;\n    }\n\n    function xorPath(path) {\n      var y1 = path.pt[0].y,\n          len = path.len,\n          x,\n          y,\n          maxX,\n          minY,\n          i,\n          j,\n          indx;\n\n      for (i = 1; i < len; i++) {\n        x = path.pt[i].x;\n        y = path.pt[i].y;\n\n        if (y !== y1) {\n          minY = y1 < y ? y1 : y;\n          maxX = path.maxX;\n\n          for (j = x; j < maxX; j++) {\n            indx = blackMap.pointToIndex(j, minY);\n            blackMap.data[indx] = blackMap.data[indx] ? 0 : 1;\n          }\n\n          y1 = y;\n        }\n      }\n    } // Clear path list\n\n\n    this._pathlist = [];\n\n    while (currentPoint = findNext(currentPoint)) {\n      path = findPath(currentPoint);\n      xorPath(path);\n\n      if (path.area > self._params.turdSize) {\n        this._pathlist.push(path);\n      }\n    }\n  },\n\n  /**\r\n   * Processes path list created by _bmToPathlist method creating and optimizing {@link Curve}'s\r\n   * @private\r\n   */\n  _processPath: function () {\n    var self = this;\n\n    function calcSums(path) {\n      var i, x, y;\n      path.x0 = path.pt[0].x;\n      path.y0 = path.pt[0].y;\n      path.sums = [];\n      var s = path.sums;\n      s.push(new Sum(0, 0, 0, 0, 0));\n\n      for (i = 0; i < path.len; i++) {\n        x = path.pt[i].x - path.x0;\n        y = path.pt[i].y - path.y0;\n        s.push(new Sum(s[i].x + x, s[i].y + y, s[i].xy + x * y, s[i].x2 + x * x, s[i].y2 + y * y));\n      }\n    }\n\n    function calcLon(path) {\n      var n = path.len,\n          pt = path.pt,\n          dir,\n          pivk = new Array(n),\n          nc = new Array(n),\n          ct = new Array(4);\n      path.lon = new Array(n);\n      var constraint = [new Point(), new Point()],\n          cur = new Point(),\n          off = new Point(),\n          dk = new Point(),\n          foundk;\n      var i,\n          j,\n          k1,\n          a,\n          b,\n          c,\n          d,\n          k = 0;\n\n      for (i = n - 1; i >= 0; i--) {\n        if (pt[i].x != pt[k].x && pt[i].y != pt[k].y) {\n          k = i + 1;\n        }\n\n        nc[i] = k;\n      }\n\n      for (i = n - 1; i >= 0; i--) {\n        ct[0] = ct[1] = ct[2] = ct[3] = 0;\n        dir = (3 + 3 * (pt[utils.mod(i + 1, n)].x - pt[i].x) + (pt[utils.mod(i + 1, n)].y - pt[i].y)) / 2;\n        ct[dir]++;\n        constraint[0].x = 0;\n        constraint[0].y = 0;\n        constraint[1].x = 0;\n        constraint[1].y = 0;\n        k = nc[i];\n        k1 = i;\n\n        while (1) {\n          foundk = 0;\n          dir = (3 + 3 * utils.sign(pt[k].x - pt[k1].x) + utils.sign(pt[k].y - pt[k1].y)) / 2;\n          ct[dir]++;\n\n          if (ct[0] && ct[1] && ct[2] && ct[3]) {\n            pivk[i] = k1;\n            foundk = 1;\n            break;\n          }\n\n          cur.x = pt[k].x - pt[i].x;\n          cur.y = pt[k].y - pt[i].y;\n\n          if (utils.xprod(constraint[0], cur) < 0 || utils.xprod(constraint[1], cur) > 0) {\n            break;\n          }\n\n          if (Math.abs(cur.x) <= 1 && Math.abs(cur.y) <= 1) {} else {\n            off.x = cur.x + (cur.y >= 0 && (cur.y > 0 || cur.x < 0) ? 1 : -1);\n            off.y = cur.y + (cur.x <= 0 && (cur.x < 0 || cur.y < 0) ? 1 : -1);\n\n            if (utils.xprod(constraint[0], off) >= 0) {\n              constraint[0].x = off.x;\n              constraint[0].y = off.y;\n            }\n\n            off.x = cur.x + (cur.y <= 0 && (cur.y < 0 || cur.x < 0) ? 1 : -1);\n            off.y = cur.y + (cur.x >= 0 && (cur.x > 0 || cur.y < 0) ? 1 : -1);\n\n            if (utils.xprod(constraint[1], off) <= 0) {\n              constraint[1].x = off.x;\n              constraint[1].y = off.y;\n            }\n          }\n\n          k1 = k;\n          k = nc[k1];\n\n          if (!utils.cyclic(k, i, k1)) {\n            break;\n          }\n        }\n\n        if (foundk === 0) {\n          dk.x = utils.sign(pt[k].x - pt[k1].x);\n          dk.y = utils.sign(pt[k].y - pt[k1].y);\n          cur.x = pt[k1].x - pt[i].x;\n          cur.y = pt[k1].y - pt[i].y;\n          a = utils.xprod(constraint[0], cur);\n          b = utils.xprod(constraint[0], dk);\n          c = utils.xprod(constraint[1], cur);\n          d = utils.xprod(constraint[1], dk);\n          j = 10000000;\n\n          if (b < 0) {\n            j = Math.floor(a / -b);\n          }\n\n          if (d > 0) {\n            j = Math.min(j, Math.floor(-c / d));\n          }\n\n          pivk[i] = utils.mod(k1 + j, n);\n        }\n      }\n\n      j = pivk[n - 1];\n      path.lon[n - 1] = j;\n\n      for (i = n - 2; i >= 0; i--) {\n        if (utils.cyclic(i + 1, pivk[i], j)) {\n          j = pivk[i];\n        }\n\n        path.lon[i] = j;\n      }\n\n      for (i = n - 1; utils.cyclic(utils.mod(i + 1, n), j, path.lon[i]); i--) {\n        path.lon[i] = j;\n      }\n    }\n\n    function bestPolygon(path) {\n      function penalty3(path, i, j) {\n        var n = path.len,\n            pt = path.pt,\n            sums = path.sums;\n        var x,\n            y,\n            xy,\n            x2,\n            y2,\n            k,\n            a,\n            b,\n            c,\n            s,\n            px,\n            py,\n            ex,\n            ey,\n            r = 0;\n\n        if (j >= n) {\n          j -= n;\n          r = 1;\n        }\n\n        if (r === 0) {\n          x = sums[j + 1].x - sums[i].x;\n          y = sums[j + 1].y - sums[i].y;\n          x2 = sums[j + 1].x2 - sums[i].x2;\n          xy = sums[j + 1].xy - sums[i].xy;\n          y2 = sums[j + 1].y2 - sums[i].y2;\n          k = j + 1 - i;\n        } else {\n          x = sums[j + 1].x - sums[i].x + sums[n].x;\n          y = sums[j + 1].y - sums[i].y + sums[n].y;\n          x2 = sums[j + 1].x2 - sums[i].x2 + sums[n].x2;\n          xy = sums[j + 1].xy - sums[i].xy + sums[n].xy;\n          y2 = sums[j + 1].y2 - sums[i].y2 + sums[n].y2;\n          k = j + 1 - i + n;\n        }\n\n        px = (pt[i].x + pt[j].x) / 2.0 - pt[0].x;\n        py = (pt[i].y + pt[j].y) / 2.0 - pt[0].y;\n        ey = pt[j].x - pt[i].x;\n        ex = -(pt[j].y - pt[i].y);\n        a = (x2 - 2 * x * px) / k + px * px;\n        b = (xy - x * py - y * px) / k + px * py;\n        c = (y2 - 2 * y * py) / k + py * py;\n        s = ex * ex * a + 2 * ex * ey * b + ey * ey * c;\n        return Math.sqrt(s);\n      }\n\n      var i,\n          j,\n          m,\n          k,\n          n = path.len,\n          pen = new Array(n + 1),\n          prev = new Array(n + 1),\n          clip0 = new Array(n),\n          clip1 = new Array(n + 1),\n          seg0 = new Array(n + 1),\n          seg1 = new Array(n + 1),\n          thispen,\n          best,\n          c;\n\n      for (i = 0; i < n; i++) {\n        c = utils.mod(path.lon[utils.mod(i - 1, n)] - 1, n);\n\n        if (c == i) {\n          c = utils.mod(i + 1, n);\n        }\n\n        if (c < i) {\n          clip0[i] = n;\n        } else {\n          clip0[i] = c;\n        }\n      }\n\n      j = 1;\n\n      for (i = 0; i < n; i++) {\n        while (j <= clip0[i]) {\n          clip1[j] = i;\n          j++;\n        }\n      }\n\n      i = 0;\n\n      for (j = 0; i < n; j++) {\n        seg0[j] = i;\n        i = clip0[i];\n      }\n\n      seg0[j] = n;\n      m = j;\n      i = n;\n\n      for (j = m; j > 0; j--) {\n        seg1[j] = i;\n        i = clip1[i];\n      }\n\n      seg1[0] = 0;\n      pen[0] = 0;\n\n      for (j = 1; j <= m; j++) {\n        for (i = seg1[j]; i <= seg0[j]; i++) {\n          best = -1;\n\n          for (k = seg0[j - 1]; k >= clip1[i]; k--) {\n            thispen = penalty3(path, k, i) + pen[k];\n\n            if (best < 0 || thispen < best) {\n              prev[i] = k;\n              best = thispen;\n            }\n          }\n\n          pen[i] = best;\n        }\n      }\n\n      path.m = m;\n      path.po = new Array(m);\n\n      for (i = n, j = m - 1; i > 0; j--) {\n        i = prev[i];\n        path.po[j] = i;\n      }\n    }\n\n    function adjustVertices(path) {\n      function pointslope(path, i, j, ctr, dir) {\n        var n = path.len,\n            sums = path.sums,\n            x,\n            y,\n            x2,\n            xy,\n            y2,\n            k,\n            a,\n            b,\n            c,\n            lambda2,\n            l,\n            r = 0;\n\n        while (j >= n) {\n          j -= n;\n          r += 1;\n        }\n\n        while (i >= n) {\n          i -= n;\n          r -= 1;\n        }\n\n        while (j < 0) {\n          j += n;\n          r -= 1;\n        }\n\n        while (i < 0) {\n          i += n;\n          r += 1;\n        }\n\n        x = sums[j + 1].x - sums[i].x + r * sums[n].x;\n        y = sums[j + 1].y - sums[i].y + r * sums[n].y;\n        x2 = sums[j + 1].x2 - sums[i].x2 + r * sums[n].x2;\n        xy = sums[j + 1].xy - sums[i].xy + r * sums[n].xy;\n        y2 = sums[j + 1].y2 - sums[i].y2 + r * sums[n].y2;\n        k = j + 1 - i + r * n;\n        ctr.x = x / k;\n        ctr.y = y / k;\n        a = (x2 - x * x / k) / k;\n        b = (xy - x * y / k) / k;\n        c = (y2 - y * y / k) / k;\n        lambda2 = (a + c + Math.sqrt((a - c) * (a - c) + 4 * b * b)) / 2;\n        a -= lambda2;\n        c -= lambda2;\n\n        if (Math.abs(a) >= Math.abs(c)) {\n          l = Math.sqrt(a * a + b * b);\n\n          if (l !== 0) {\n            dir.x = -b / l;\n            dir.y = a / l;\n          }\n        } else {\n          l = Math.sqrt(c * c + b * b);\n\n          if (l !== 0) {\n            dir.x = -c / l;\n            dir.y = b / l;\n          }\n        }\n\n        if (l === 0) {\n          dir.x = dir.y = 0;\n        }\n      }\n\n      var m = path.m,\n          po = path.po,\n          n = path.len,\n          pt = path.pt,\n          x0 = path.x0,\n          y0 = path.y0,\n          ctr = new Array(m),\n          dir = new Array(m),\n          q = new Array(m),\n          v = new Array(3),\n          d,\n          i,\n          j,\n          k,\n          l,\n          s = new Point();\n      path.curve = new Curve(m);\n\n      for (i = 0; i < m; i++) {\n        j = po[utils.mod(i + 1, m)];\n        j = utils.mod(j - po[i], n) + po[i];\n        ctr[i] = new Point();\n        dir[i] = new Point();\n        pointslope(path, po[i], j, ctr[i], dir[i]);\n      }\n\n      for (i = 0; i < m; i++) {\n        q[i] = new Quad();\n        d = dir[i].x * dir[i].x + dir[i].y * dir[i].y;\n\n        if (d === 0.0) {\n          for (j = 0; j < 3; j++) {\n            for (k = 0; k < 3; k++) {\n              q[i].data[j * 3 + k] = 0;\n            }\n          }\n        } else {\n          v[0] = dir[i].y;\n          v[1] = -dir[i].x;\n          v[2] = -v[1] * ctr[i].y - v[0] * ctr[i].x;\n\n          for (l = 0; l < 3; l++) {\n            for (k = 0; k < 3; k++) {\n              q[i].data[l * 3 + k] = v[l] * v[k] / d;\n            }\n          }\n        }\n      }\n\n      var Q, w, dx, dy, det, min, cand, xmin, ymin, z;\n\n      for (i = 0; i < m; i++) {\n        Q = new Quad();\n        w = new Point();\n        s.x = pt[po[i]].x - x0;\n        s.y = pt[po[i]].y - y0;\n        j = utils.mod(i - 1, m);\n\n        for (l = 0; l < 3; l++) {\n          for (k = 0; k < 3; k++) {\n            Q.data[l * 3 + k] = q[j].at(l, k) + q[i].at(l, k);\n          }\n        }\n\n        while (1) {\n          det = Q.at(0, 0) * Q.at(1, 1) - Q.at(0, 1) * Q.at(1, 0);\n\n          if (det !== 0.0) {\n            w.x = (-Q.at(0, 2) * Q.at(1, 1) + Q.at(1, 2) * Q.at(0, 1)) / det;\n            w.y = (Q.at(0, 2) * Q.at(1, 0) - Q.at(1, 2) * Q.at(0, 0)) / det;\n            break;\n          }\n\n          if (Q.at(0, 0) > Q.at(1, 1)) {\n            v[0] = -Q.at(0, 1);\n            v[1] = Q.at(0, 0);\n          } else if (Q.at(1, 1)) {\n            v[0] = -Q.at(1, 1);\n            v[1] = Q.at(1, 0);\n          } else {\n            v[0] = 1;\n            v[1] = 0;\n          }\n\n          d = v[0] * v[0] + v[1] * v[1];\n          v[2] = -v[1] * s.y - v[0] * s.x;\n\n          for (l = 0; l < 3; l++) {\n            for (k = 0; k < 3; k++) {\n              Q.data[l * 3 + k] += v[l] * v[k] / d;\n            }\n          }\n        }\n\n        dx = Math.abs(w.x - s.x);\n        dy = Math.abs(w.y - s.y);\n\n        if (dx <= 0.5 && dy <= 0.5) {\n          path.curve.vertex[i] = new Point(w.x + x0, w.y + y0);\n          continue;\n        }\n\n        min = utils.quadform(Q, s);\n        xmin = s.x;\n        ymin = s.y;\n\n        if (Q.at(0, 0) !== 0.0) {\n          for (z = 0; z < 2; z++) {\n            w.y = s.y - 0.5 + z;\n            w.x = -(Q.at(0, 1) * w.y + Q.at(0, 2)) / Q.at(0, 0);\n            dx = Math.abs(w.x - s.x);\n            cand = utils.quadform(Q, w);\n\n            if (dx <= 0.5 && cand < min) {\n              min = cand;\n              xmin = w.x;\n              ymin = w.y;\n            }\n          }\n        }\n\n        if (Q.at(1, 1) !== 0.0) {\n          for (z = 0; z < 2; z++) {\n            w.x = s.x - 0.5 + z;\n            w.y = -(Q.at(1, 0) * w.x + Q.at(1, 2)) / Q.at(1, 1);\n            dy = Math.abs(w.y - s.y);\n            cand = utils.quadform(Q, w);\n\n            if (dy <= 0.5 && cand < min) {\n              min = cand;\n              xmin = w.x;\n              ymin = w.y;\n            }\n          }\n        }\n\n        for (l = 0; l < 2; l++) {\n          for (k = 0; k < 2; k++) {\n            w.x = s.x - 0.5 + l;\n            w.y = s.y - 0.5 + k;\n            cand = utils.quadform(Q, w);\n\n            if (cand < min) {\n              min = cand;\n              xmin = w.x;\n              ymin = w.y;\n            }\n          }\n        }\n\n        path.curve.vertex[i] = new Point(xmin + x0, ymin + y0);\n      }\n    }\n\n    function reverse(path) {\n      var curve = path.curve,\n          m = curve.n,\n          v = curve.vertex,\n          i,\n          j,\n          tmp;\n\n      for (i = 0, j = m - 1; i < j; i++, j--) {\n        tmp = v[i];\n        v[i] = v[j];\n        v[j] = tmp;\n      }\n    }\n\n    function smooth(path) {\n      var m = path.curve.n,\n          curve = path.curve;\n      var i, j, k, dd, denom, alpha, p2, p3, p4;\n\n      for (i = 0; i < m; i++) {\n        j = utils.mod(i + 1, m);\n        k = utils.mod(i + 2, m);\n        p4 = utils.interval(1 / 2.0, curve.vertex[k], curve.vertex[j]);\n        denom = utils.ddenom(curve.vertex[i], curve.vertex[k]);\n\n        if (denom !== 0.0) {\n          dd = utils.dpara(curve.vertex[i], curve.vertex[j], curve.vertex[k]) / denom;\n          dd = Math.abs(dd);\n          alpha = dd > 1 ? 1 - 1.0 / dd : 0;\n          alpha = alpha / 0.75;\n        } else {\n          alpha = 4 / 3.0;\n        }\n\n        curve.alpha0[j] = alpha;\n\n        if (alpha >= self._params.alphaMax) {\n          curve.tag[j] = \"CORNER\";\n          curve.c[3 * j + 1] = curve.vertex[j];\n          curve.c[3 * j + 2] = p4;\n        } else {\n          if (alpha < 0.55) {\n            alpha = 0.55;\n          } else if (alpha > 1) {\n            alpha = 1;\n          }\n\n          p2 = utils.interval(0.5 + 0.5 * alpha, curve.vertex[i], curve.vertex[j]);\n          p3 = utils.interval(0.5 + 0.5 * alpha, curve.vertex[k], curve.vertex[j]);\n          curve.tag[j] = \"CURVE\";\n          curve.c[3 * j + 0] = p2;\n          curve.c[3 * j + 1] = p3;\n          curve.c[3 * j + 2] = p4;\n        }\n\n        curve.alpha[j] = alpha;\n        curve.beta[j] = 0.5;\n      }\n\n      curve.alphaCurve = 1;\n    }\n\n    function optiCurve(path) {\n      function opti_penalty(path, i, j, res, opttolerance, convc, areac) {\n        var m = path.curve.n,\n            curve = path.curve,\n            vertex = curve.vertex,\n            k,\n            k1,\n            k2,\n            conv,\n            i1,\n            area,\n            alpha,\n            d,\n            d1,\n            d2,\n            p0,\n            p1,\n            p2,\n            p3,\n            pt,\n            A,\n            R,\n            A1,\n            A2,\n            A3,\n            A4,\n            s,\n            t;\n\n        if (i == j) {\n          return 1;\n        }\n\n        k = i;\n        i1 = utils.mod(i + 1, m);\n        k1 = utils.mod(k + 1, m);\n        conv = convc[k1];\n\n        if (conv === 0) {\n          return 1;\n        }\n\n        d = utils.ddist(vertex[i], vertex[i1]);\n\n        for (k = k1; k != j; k = k1) {\n          k1 = utils.mod(k + 1, m);\n          k2 = utils.mod(k + 2, m);\n\n          if (convc[k1] != conv) {\n            return 1;\n          }\n\n          if (utils.sign(utils.cprod(vertex[i], vertex[i1], vertex[k1], vertex[k2])) != conv) {\n            return 1;\n          }\n\n          if (utils.iprod1(vertex[i], vertex[i1], vertex[k1], vertex[k2]) < d * utils.ddist(vertex[k1], vertex[k2]) * -0.999847695156) {\n            return 1;\n          }\n        }\n\n        p0 = curve.c[utils.mod(i, m) * 3 + 2].copy();\n        p1 = vertex[utils.mod(i + 1, m)].copy();\n        p2 = vertex[utils.mod(j, m)].copy();\n        p3 = curve.c[utils.mod(j, m) * 3 + 2].copy();\n        area = areac[j] - areac[i];\n        area -= utils.dpara(vertex[0], curve.c[i * 3 + 2], curve.c[j * 3 + 2]) / 2;\n\n        if (i >= j) {\n          area += areac[m];\n        }\n\n        A1 = utils.dpara(p0, p1, p2);\n        A2 = utils.dpara(p0, p1, p3);\n        A3 = utils.dpara(p0, p2, p3);\n        A4 = A1 + A3 - A2;\n\n        if (A2 == A1) {\n          return 1;\n        }\n\n        t = A3 / (A3 - A4);\n        s = A2 / (A2 - A1);\n        A = A2 * t / 2.0;\n\n        if (A === 0.0) {\n          return 1;\n        }\n\n        R = area / A;\n        alpha = 2 - Math.sqrt(4 - R / 0.3);\n        res.c[0] = utils.interval(t * alpha, p0, p1);\n        res.c[1] = utils.interval(s * alpha, p3, p2);\n        res.alpha = alpha;\n        res.t = t;\n        res.s = s;\n        p1 = res.c[0].copy();\n        p2 = res.c[1].copy();\n        res.pen = 0;\n\n        for (k = utils.mod(i + 1, m); k != j; k = k1) {\n          k1 = utils.mod(k + 1, m);\n          t = utils.tangent(p0, p1, p2, p3, vertex[k], vertex[k1]);\n\n          if (t < -0.5) {\n            return 1;\n          }\n\n          pt = utils.bezier(t, p0, p1, p2, p3);\n          d = utils.ddist(vertex[k], vertex[k1]);\n\n          if (d === 0.0) {\n            return 1;\n          }\n\n          d1 = utils.dpara(vertex[k], vertex[k1], pt) / d;\n\n          if (Math.abs(d1) > opttolerance) {\n            return 1;\n          }\n\n          if (utils.iprod(vertex[k], vertex[k1], pt) < 0 || utils.iprod(vertex[k1], vertex[k], pt) < 0) {\n            return 1;\n          }\n\n          res.pen += d1 * d1;\n        }\n\n        for (k = i; k != j; k = k1) {\n          k1 = utils.mod(k + 1, m);\n          t = utils.tangent(p0, p1, p2, p3, curve.c[k * 3 + 2], curve.c[k1 * 3 + 2]);\n\n          if (t < -0.5) {\n            return 1;\n          }\n\n          pt = utils.bezier(t, p0, p1, p2, p3);\n          d = utils.ddist(curve.c[k * 3 + 2], curve.c[k1 * 3 + 2]);\n\n          if (d === 0.0) {\n            return 1;\n          }\n\n          d1 = utils.dpara(curve.c[k * 3 + 2], curve.c[k1 * 3 + 2], pt) / d;\n          d2 = utils.dpara(curve.c[k * 3 + 2], curve.c[k1 * 3 + 2], vertex[k1]) / d;\n          d2 *= 0.75 * curve.alpha[k1];\n\n          if (d2 < 0) {\n            d1 = -d1;\n            d2 = -d2;\n          }\n\n          if (d1 < d2 - opttolerance) {\n            return 1;\n          }\n\n          if (d1 < d2) {\n            res.pen += (d1 - d2) * (d1 - d2);\n          }\n        }\n\n        return 0;\n      }\n\n      var curve = path.curve,\n          m = curve.n,\n          vert = curve.vertex,\n          pt = new Array(m + 1),\n          pen = new Array(m + 1),\n          len = new Array(m + 1),\n          opt = new Array(m + 1),\n          om,\n          i,\n          j,\n          r,\n          o = new Opti(),\n          p0,\n          i1,\n          area,\n          alpha,\n          ocurve,\n          s,\n          t;\n      var convc = new Array(m),\n          areac = new Array(m + 1);\n\n      for (i = 0; i < m; i++) {\n        if (curve.tag[i] == \"CURVE\") {\n          convc[i] = utils.sign(utils.dpara(vert[utils.mod(i - 1, m)], vert[i], vert[utils.mod(i + 1, m)]));\n        } else {\n          convc[i] = 0;\n        }\n      }\n\n      area = 0.0;\n      areac[0] = 0.0;\n      p0 = curve.vertex[0];\n\n      for (i = 0; i < m; i++) {\n        i1 = utils.mod(i + 1, m);\n\n        if (curve.tag[i1] == \"CURVE\") {\n          alpha = curve.alpha[i1];\n          area += 0.3 * alpha * (4 - alpha) * utils.dpara(curve.c[i * 3 + 2], vert[i1], curve.c[i1 * 3 + 2]) / 2;\n          area += utils.dpara(p0, curve.c[i * 3 + 2], curve.c[i1 * 3 + 2]) / 2;\n        }\n\n        areac[i + 1] = area;\n      }\n\n      pt[0] = -1;\n      pen[0] = 0;\n      len[0] = 0;\n\n      for (j = 1; j <= m; j++) {\n        pt[j] = j - 1;\n        pen[j] = pen[j - 1];\n        len[j] = len[j - 1] + 1;\n\n        for (i = j - 2; i >= 0; i--) {\n          r = opti_penalty(path, i, utils.mod(j, m), o, self._params.optTolerance, convc, areac);\n\n          if (r) {\n            break;\n          }\n\n          if (len[j] > len[i] + 1 || len[j] == len[i] + 1 && pen[j] > pen[i] + o.pen) {\n            pt[j] = i;\n            pen[j] = pen[i] + o.pen;\n            len[j] = len[i] + 1;\n            opt[j] = o;\n            o = new Opti();\n          }\n        }\n      }\n\n      om = len[m];\n      ocurve = new Curve(om);\n      s = new Array(om);\n      t = new Array(om);\n      j = m;\n\n      for (i = om - 1; i >= 0; i--) {\n        if (pt[j] == j - 1) {\n          ocurve.tag[i] = curve.tag[utils.mod(j, m)];\n          ocurve.c[i * 3 + 0] = curve.c[utils.mod(j, m) * 3 + 0];\n          ocurve.c[i * 3 + 1] = curve.c[utils.mod(j, m) * 3 + 1];\n          ocurve.c[i * 3 + 2] = curve.c[utils.mod(j, m) * 3 + 2];\n          ocurve.vertex[i] = curve.vertex[utils.mod(j, m)];\n          ocurve.alpha[i] = curve.alpha[utils.mod(j, m)];\n          ocurve.alpha0[i] = curve.alpha0[utils.mod(j, m)];\n          ocurve.beta[i] = curve.beta[utils.mod(j, m)];\n          s[i] = t[i] = 1.0;\n        } else {\n          ocurve.tag[i] = \"CURVE\";\n          ocurve.c[i * 3 + 0] = opt[j].c[0];\n          ocurve.c[i * 3 + 1] = opt[j].c[1];\n          ocurve.c[i * 3 + 2] = curve.c[utils.mod(j, m) * 3 + 2];\n          ocurve.vertex[i] = utils.interval(opt[j].s, curve.c[utils.mod(j, m) * 3 + 2], vert[utils.mod(j, m)]);\n          ocurve.alpha[i] = opt[j].alpha;\n          ocurve.alpha0[i] = opt[j].alpha;\n          s[i] = opt[j].s;\n          t[i] = opt[j].t;\n        }\n\n        j = pt[j];\n      }\n\n      for (i = 0; i < om; i++) {\n        i1 = utils.mod(i + 1, om);\n        ocurve.beta[i] = s[i] / (s[i] + t[i1]);\n      }\n\n      ocurve.alphaCurve = 1;\n      path.curve = ocurve;\n    }\n\n    for (var i = 0; i < this._pathlist.length; i++) {\n      var path = this._pathlist[i];\n      calcSums(path);\n      calcLon(path);\n      bestPolygon(path);\n      adjustVertices(path);\n\n      if (path.sign === \"-\") {\n        reverse(path);\n      }\n\n      smooth(path);\n\n      if (self._params.optCurve) {\n        optiCurve(path);\n      }\n    }\n  },\n\n  /**\r\n   * Validates some of parameters\r\n   * @param params\r\n   * @private\r\n   */\n  _validateParameters: function (params) {\n    if (params && params.turnPolicy && SUPPORTED_TURNPOLICY_VALUES.indexOf(params.turnPolicy) === -1) {\n      var goodVals = '\\'' + SUPPORTED_TURNPOLICY_VALUES.join('\\', \\'') + '\\'';\n      throw new Error('Bad turnPolicy value. Allowed values are: ' + goodVals);\n    }\n\n    if (params && params.threshold != null && params.threshold !== Potrace.THRESHOLD_AUTO) {\n      if (typeof params.threshold !== 'number' || !utils.between(params.threshold, 0, 255)) {\n        throw new Error('Bad threshold value. Expected to be an integer in range 0..255');\n      }\n    }\n\n    if (params && params.optCurve != null && typeof params.optCurve !== 'boolean') {\n      throw new Error('\\'optCurve\\' must be Boolean');\n    }\n  },\n  _processLoadedImage: function (image) {\n    var bitmap = new Bitmap(image.bitmap.width, image.bitmap.height);\n    var pixels = image.bitmap.data;\n    image.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n      // We want background underneath non-opaque regions to be white\n      var opacity = pixels[idx + 3] / 255,\n          r = 255 + (pixels[idx + 0] - 255) * opacity,\n          g = 255 + (pixels[idx + 1] - 255) * opacity,\n          b = 255 + (pixels[idx + 2] - 255) * opacity;\n      bitmap.data[idx / 4] = utils.luminance(r, g, b);\n    });\n    this._luminanceData = bitmap;\n    this._imageLoaded = true;\n  },\n\n  /**\r\n   * Reads given image. Uses {@link Jimp} under the hood, so target can be whatever Jimp can take\r\n   *\r\n   * @param {string|Buffer|Jimp} target Image source. Could be anything that {@link Jimp} can read (buffer, local path or url). Supported formats are: PNG, JPEG or BMP\r\n   * @param {Function} callback\r\n   */\n  loadImage: function (target, callback) {\n    var self = this;\n    var jobId = {};\n    this._imageLoadingIdentifier = jobId;\n    this._imageLoaded = false;\n\n    if (target instanceof Jimp) {\n      this._imageLoadingIdentifier = null;\n      this._imageLoaded = true;\n\n      self._processLoadedImage(target);\n\n      callback.call(self, null);\n    } else {\n      Jimp.read(target, function (err, img) {\n        var sourceChanged = self._imageLoadingIdentifier !== jobId;\n\n        if (sourceChanged) {\n          var error = err ? err : new Error('Another image was loaded instead');\n          return callback.call(self, error);\n        }\n\n        self._imageLoadingIdentifier = null;\n\n        self._processLoadedImage(img);\n\n        callback.call(self, null);\n      });\n    }\n  },\n\n  /**\r\n   * Sets algorithm parameters\r\n   * @param {Potrace~Options} newParams\r\n   */\n  setParameters: function (newParams) {\n    var key, tmpOldVal;\n\n    this._validateParameters(newParams);\n\n    for (key in this._params) {\n      if (this._params.hasOwnProperty(key) && newParams.hasOwnProperty(key)) {\n        tmpOldVal = this._params[key];\n        this._params[key] = newParams[key];\n\n        if (tmpOldVal !== this._params[key] && ['color', 'background'].indexOf(key) === -1) {\n          this._processed = false;\n        }\n      }\n    }\n  },\n\n  /**\r\n   * Generates just <path> tag without rest of the SVG file\r\n   *\r\n   * @param {String} [fillColor] - overrides color from parameters\r\n   * @returns {String}\r\n   */\n  getPathTag: function (fillColor) {\n    fillColor = arguments.length === 0 ? this._params.color : fillColor;\n\n    if (fillColor === Potrace.COLOR_AUTO) {\n      fillColor = this._params.blackOnWhite ? 'black' : 'white';\n    }\n\n    if (!this._imageLoaded) {\n      throw new Error('Image should be loaded first');\n    }\n\n    if (!this._processed) {\n      this._bmToPathlist();\n\n      this._processPath();\n\n      this._processed = true;\n    }\n\n    var tag = '<path d=\"';\n\n    this._pathlist.forEach(function (path) {\n      tag += utils.renderCurve(path.curve, 1);\n    });\n\n    tag += '\" stroke=\"none\" fill=\"' + fillColor + '\" fill-rule=\"evenodd\"/>';\n    return tag;\n  },\n\n  /**\r\n   * Returns <symbol> tag. Always has viewBox specified and comes with no fill color,\r\n   * so it could be changed with <use> tag\r\n   *\r\n   * @param id\r\n   * @returns {string}\r\n   */\n  getSymbol: function (id) {\n    return '<symbol ' + 'viewBox=\"0 0 ' + this._luminanceData.width + ' ' + this._luminanceData.height + '\" ' + 'id=\"' + id + '\">' + this.getPathTag('') + '</symbol>';\n  },\n\n  /**\r\n   * Generates SVG image\r\n   * @returns {String}\r\n   */\n  getSVG: function () {\n    var width = this._luminanceData.width;\n    var height = this._luminanceData.height;\n    return '<svg xmlns=\"http://www.w3.org/2000/svg\" ' + 'width=\"' + width + '\" ' + 'height=\"' + height + '\" ' + 'viewBox=\"0 0 ' + width + ' ' + height + '\" ' + 'version=\"1.1\">\\n' + (this._params.background !== Potrace.COLOR_TRANSPARENT ? '\\t<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"' + this._params.background + '\" />\\n' : '') + '\\t' + this.getPathTag(this._params.color) + '\\n' + '</svg>';\n  }\n};\nmodule.exports = Potrace;\n/**\r\n * Potrace options\r\n *\r\n * @typedef {Object} Potrace~Options\r\n * @property {*}       [turnPolicy]   - how to resolve ambiguities in path decomposition (default Potrace.TURNPOLICY_MINORITY)\r\n * @property {Number}  [turdSize]     - suppress speckles of up to this size (default 2)\r\n * @property {Number}  [alphaMax]     - corner threshold parameter (default 1)\r\n * @property {Boolean} [optCurve]     - curve optimization (default true)\r\n * @property {Number}  [optTolerance] - curve optimization tolerance (default 0.2)\r\n * @property {Number}  [threshold]    - threshold below which color is considered black (0..255, default Potrace.THRESHOLD_AUTO)\r\n * @property {Boolean} [blackOnWhite] - specifies colors by which side from threshold should be traced (default true)\r\n * @property {string}  [color]        - foreground color (default: 'auto' (black or white)) Will be ignored when exporting as <symbol>\r\n * @property {string}  [background]   - background color (default: 'transparent') Will be ignored when exporting as <symbol>\r\n */\n\n/**\r\n * Jimp module\r\n * @external Jimp\r\n * @see https://www.npmjs.com/package/jimp\r\n */","map":{"version":3,"sources":["/Users/zakstratton/Documents/design-tool/node_modules/potrace/lib/Potrace.js"],"names":["Jimp","require","Bitmap","Curve","Point","Path","Quad","Sum","Opti","utils","Potrace","options","_luminanceData","_pathlist","_imageLoadingIdentifier","_imageLoaded","_processed","_params","turnPolicy","TURNPOLICY_MINORITY","turdSize","alphaMax","optCurve","optTolerance","threshold","THRESHOLD_AUTO","blackOnWhite","color","COLOR_AUTO","background","COLOR_TRANSPARENT","setParameters","TURNPOLICY_BLACK","TURNPOLICY_WHITE","TURNPOLICY_LEFT","TURNPOLICY_RIGHT","TURNPOLICY_MAJORITY","SUPPORTED_TURNPOLICY_VALUES","prototype","_bmToPathlist","self","blackMap","currentPoint","path","histogram","autoThreshold","copy","lum","pastTheThreshold","findNext","point","i","pointToIndex","size","data","indexToPoint","majority","x","y","a","ct","getValueAt","findPath","dirx","diry","tmp","sign","pt","push","maxX","minX","maxY","minY","len","area","l","r","xorPath","y1","j","indx","_processPath","calcSums","x0","y0","sums","s","xy","x2","y2","calcLon","n","dir","pivk","Array","nc","lon","constraint","cur","off","dk","foundk","k1","b","c","d","k","mod","xprod","Math","abs","cyclic","floor","min","bestPolygon","penalty3","px","py","ex","ey","sqrt","m","pen","prev","clip0","clip1","seg0","seg1","thispen","best","po","adjustVertices","pointslope","ctr","lambda2","q","v","curve","Q","w","dx","dy","det","cand","xmin","ymin","z","at","vertex","quadform","reverse","smooth","dd","denom","alpha","p2","p3","p4","interval","ddenom","dpara","alpha0","tag","beta","alphaCurve","optiCurve","opti_penalty","res","opttolerance","convc","areac","k2","conv","i1","d1","d2","p0","p1","A","R","A1","A2","A3","A4","t","ddist","cprod","iprod1","tangent","bezier","iprod","vert","opt","om","o","ocurve","length","_validateParameters","params","indexOf","goodVals","join","Error","between","_processLoadedImage","image","bitmap","width","height","pixels","scan","idx","opacity","g","luminance","loadImage","target","callback","jobId","call","read","err","img","sourceChanged","error","newParams","key","tmpOldVal","hasOwnProperty","getPathTag","fillColor","arguments","forEach","renderCurve","getSymbol","id","getSVG","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar Jimp = require('jimp');\r\nvar Bitmap = require('./types/Bitmap');\r\nvar Curve = require('./types/Curve');\r\nvar Point = require('./types/Point');\r\nvar Path = require('./types/Path');\r\nvar Quad = require('./types/Quad');\r\nvar Sum = require('./types/Sum');\r\nvar Opti = require('./types/Opti');\r\n\r\nvar utils = require('./utils');\r\n\r\n/**\r\n * Potrace class\r\n *\r\n * @param {Potrace~Options} [options]\r\n * @constructor\r\n */\r\nfunction Potrace (options) {\r\n  this._luminanceData = null;\r\n  this._pathlist = [];\r\n\r\n  this._imageLoadingIdentifier = null;\r\n  this._imageLoaded = false;\r\n  this._processed = false;\r\n\r\n  this._params = {\r\n    turnPolicy: Potrace.TURNPOLICY_MINORITY,\r\n    turdSize: 2,\r\n    alphaMax: 1,\r\n    optCurve: true,\r\n    optTolerance: 0.2,\r\n    threshold: Potrace.THRESHOLD_AUTO,\r\n    blackOnWhite: true,\r\n    color: Potrace.COLOR_AUTO,\r\n    background: Potrace.COLOR_TRANSPARENT\r\n  };\r\n\r\n  if (options) {\r\n    this.setParameters(options);\r\n  }\r\n}\r\n\r\nPotrace.COLOR_AUTO = 'auto';\r\nPotrace.COLOR_TRANSPARENT = 'transparent';\r\nPotrace.THRESHOLD_AUTO = -1;\r\nPotrace.TURNPOLICY_BLACK = 'black';\r\nPotrace.TURNPOLICY_WHITE = 'white';\r\nPotrace.TURNPOLICY_LEFT = 'left';\r\nPotrace.TURNPOLICY_RIGHT = 'right';\r\nPotrace.TURNPOLICY_MINORITY = 'minority';\r\nPotrace.TURNPOLICY_MAJORITY = 'majority';\r\n\r\nvar SUPPORTED_TURNPOLICY_VALUES = [\r\n  Potrace.TURNPOLICY_BLACK, Potrace.TURNPOLICY_WHITE,\r\n  Potrace.TURNPOLICY_LEFT, Potrace.TURNPOLICY_RIGHT,\r\n  Potrace.TURNPOLICY_MINORITY, Potrace.TURNPOLICY_MAJORITY\r\n];\r\n\r\nPotrace.prototype = {\r\n  /**\r\n   * Creating a new {@link Path} for every group of black pixels.\r\n   * @private\r\n   */\r\n  _bmToPathlist: function() {\r\n    var self = this,\r\n        threshold = this._params.threshold,\r\n        blackOnWhite = this._params.blackOnWhite,\r\n        blackMap,\r\n        currentPoint = new Point(0, 0),\r\n        path;\r\n\r\n    if (threshold === Potrace.THRESHOLD_AUTO) {\r\n      threshold = this._luminanceData.histogram().autoThreshold() || 128;\r\n    }\r\n\r\n    blackMap = this._luminanceData.copy(function(lum) {\r\n      var pastTheThreshold = blackOnWhite\r\n        ? lum > threshold\r\n        : lum < threshold;\r\n\r\n      return pastTheThreshold ? 0 : 1;\r\n    });\r\n      \r\n    /**\r\n     * finds next black pixel of the image\r\n     *\r\n     * @param {Point} point\r\n     * @returns {boolean}\r\n     * @private\r\n     */\r\n    function findNext(point) {\r\n      var i = blackMap.pointToIndex(point);\r\n\r\n      while (i < blackMap.size && blackMap.data[i] !== 1) {\r\n        i++;\r\n      }\r\n\r\n      return i < blackMap.size && blackMap.indexToPoint(i);\r\n    }\r\n\r\n    function majority(x, y) {\r\n      var i, a, ct;\r\n\r\n      for (i = 2; i < 5; i++) {\r\n        ct = 0;\r\n        for (a = -i + 1; a <= i - 1; a++) {\r\n          ct += blackMap.getValueAt(x + a, y + i - 1) ? 1 : -1;\r\n          ct += blackMap.getValueAt(x + i - 1, y + a - 1) ? 1 : -1;\r\n          ct += blackMap.getValueAt(x + a - 1, y - i) ? 1 : -1;\r\n          ct += blackMap.getValueAt(x - i, y + a) ? 1 : -1;\r\n        }\r\n\r\n        if (ct > 0) {\r\n          return 1;\r\n        } else if (ct < 0) {\r\n          return 0;\r\n        }\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    function findPath(point) {\r\n      var path = new Path(),\r\n          x = point.x,\r\n          y = point.y,\r\n          dirx = 0,\r\n          diry = 1,\r\n          tmp;\r\n\r\n      path.sign = blackMap.getValueAt(point.x, point.y) ? \"+\" : \"-\";\r\n\r\n      while (1) {\r\n        path.pt.push(new Point(x, y));\r\n        if (x > path.maxX)\r\n          path.maxX = x;\r\n        if (x < path.minX)\r\n          path.minX = x;\r\n        if (y > path.maxY)\r\n          path.maxY = y;\r\n        if (y < path.minY)\r\n          path.minY = y;\r\n        path.len++;\r\n\r\n        x += dirx;\r\n        y += diry;\r\n        path.area -= x * diry;\r\n\r\n        if (x === point.x && y === point.y)\r\n          break;\r\n\r\n        var l = blackMap.getValueAt(x + (dirx + diry - 1 ) / 2, y + (diry - dirx - 1) / 2);\r\n        var r = blackMap.getValueAt(x + (dirx - diry - 1) / 2, y + (diry + dirx - 1) / 2);\r\n\r\n        if (r && !l) {\r\n          if (self._params.turnPolicy === \"right\" ||\r\n            (self._params.turnPolicy === \"black\" && path.sign === '+') ||\r\n            (self._params.turnPolicy === \"white\" && path.sign === '-') ||\r\n            (self._params.turnPolicy === \"majority\" && majority(x, y)) ||\r\n            (self._params.turnPolicy === \"minority\" && !majority(x, y))) {\r\n            tmp = dirx;\r\n            dirx = -diry;\r\n            diry = tmp;\r\n          } else {\r\n            tmp = dirx;\r\n            dirx = diry;\r\n            diry = -tmp;\r\n          }\r\n        } else if (r) {\r\n          tmp = dirx;\r\n          dirx = -diry;\r\n          diry = tmp;\r\n        } else if (!l) {\r\n          tmp = dirx;\r\n          dirx = diry;\r\n          diry = -tmp;\r\n        }\r\n      }\r\n      return path;\r\n    }\r\n\r\n    function xorPath(path){\r\n      var y1 = path.pt[0].y,\r\n        len = path.len,\r\n        x, y, maxX, minY, i, j,\r\n        indx;\r\n\r\n      for (i = 1; i < len; i++) {\r\n        x = path.pt[i].x;\r\n        y = path.pt[i].y;\r\n\r\n        if (y !== y1) {\r\n          minY = y1 < y ? y1 : y;\r\n          maxX = path.maxX;\r\n          for (j = x; j < maxX; j++) {\r\n            indx = blackMap.pointToIndex(j, minY);\r\n            blackMap.data[indx] = blackMap.data[indx] ? 0 : 1;\r\n          }\r\n          y1 = y;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clear path list\r\n    this._pathlist = [];\r\n\r\n    while (currentPoint = findNext(currentPoint)) {\r\n      path = findPath(currentPoint);\r\n      xorPath(path);\r\n\r\n      if (path.area > self._params.turdSize) {\r\n        this._pathlist.push(path);\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Processes path list created by _bmToPathlist method creating and optimizing {@link Curve}'s\r\n   * @private\r\n   */\r\n  _processPath: function() {\r\n    var self = this;\r\n\r\n    function calcSums(path) {\r\n      var i, x, y;\r\n      path.x0 = path.pt[0].x;\r\n      path.y0 = path.pt[0].y;\r\n\r\n      path.sums = [];\r\n      var s = path.sums;\r\n      s.push(new Sum(0, 0, 0, 0, 0));\r\n      for(i = 0; i < path.len; i++){\r\n        x = path.pt[i].x - path.x0;\r\n        y = path.pt[i].y - path.y0;\r\n        s.push(new Sum(s[i].x + x, s[i].y + y, s[i].xy + x * y,\r\n            s[i].x2 + x * x, s[i].y2 + y * y));\r\n      }\r\n    }\r\n\r\n    function calcLon(path) {\r\n\r\n      var n = path.len,\r\n          pt = path.pt,\r\n          dir,\r\n          pivk = new Array(n),\r\n          nc = new Array(n),\r\n          ct = new Array(4);\r\n\r\n      path.lon = new Array(n);\r\n\r\n      var constraint = [new Point(), new Point()],\r\n          cur = new Point(),\r\n          off = new Point(),\r\n          dk = new Point(),\r\n          foundk;\r\n\r\n      var i, j, k1, a, b, c, d, k = 0;\r\n      for(i = n - 1; i >= 0; i--){\r\n        if (pt[i].x != pt[k].x && pt[i].y != pt[k].y) {\r\n          k = i + 1;\r\n        }\r\n        nc[i] = k;\r\n      }\r\n\r\n      for (i = n - 1; i >= 0; i--) {\r\n        ct[0] = ct[1] = ct[2] = ct[3] = 0;\r\n        dir = (3 + 3 * (pt[utils.mod(i + 1, n)].x - pt[i].x) +\r\n            (pt[utils.mod(i + 1, n)].y - pt[i].y)) / 2;\r\n        ct[dir]++;\r\n\r\n        constraint[0].x = 0;\r\n        constraint[0].y = 0;\r\n        constraint[1].x = 0;\r\n        constraint[1].y = 0;\r\n\r\n        k = nc[i];\r\n        k1 = i;\r\n        while (1) {\r\n          foundk = 0;\r\n          dir =  (3 + 3 * utils.sign(pt[k].x - pt[k1].x) +\r\n              utils.sign(pt[k].y - pt[k1].y)) / 2;\r\n          ct[dir]++;\r\n\r\n          if (ct[0] && ct[1] && ct[2] && ct[3]) {\r\n            pivk[i] = k1;\r\n            foundk = 1;\r\n            break;\r\n          }\r\n\r\n          cur.x = pt[k].x - pt[i].x;\r\n          cur.y = pt[k].y - pt[i].y;\r\n\r\n          if (utils.xprod(constraint[0], cur) < 0 || utils.xprod(constraint[1], cur) > 0) {\r\n            break;\r\n          }\r\n\r\n          if (Math.abs(cur.x) <= 1 && Math.abs(cur.y) <= 1) {\r\n\r\n          } else {\r\n            off.x = cur.x + ((cur.y >= 0 && (cur.y > 0 || cur.x < 0)) ? 1 : -1);\r\n            off.y = cur.y + ((cur.x <= 0 && (cur.x < 0 || cur.y < 0)) ? 1 : -1);\r\n            if (utils.xprod(constraint[0], off) >= 0) {\r\n              constraint[0].x = off.x;\r\n              constraint[0].y = off.y;\r\n            }\r\n            off.x = cur.x + ((cur.y <= 0 && (cur.y < 0 || cur.x < 0)) ? 1 : -1);\r\n            off.y = cur.y + ((cur.x >= 0 && (cur.x > 0 || cur.y < 0)) ? 1 : -1);\r\n            if (utils.xprod(constraint[1], off) <= 0) {\r\n              constraint[1].x = off.x;\r\n              constraint[1].y = off.y;\r\n            }\r\n          }\r\n          k1 = k;\r\n          k = nc[k1];\r\n          if (!utils.cyclic(k, i, k1)) {\r\n            break;\r\n          }\r\n        }\r\n        if (foundk === 0) {\r\n          dk.x = utils.sign(pt[k].x-pt[k1].x);\r\n          dk.y = utils.sign(pt[k].y-pt[k1].y);\r\n          cur.x = pt[k1].x - pt[i].x;\r\n          cur.y = pt[k1].y - pt[i].y;\r\n\r\n          a = utils.xprod(constraint[0], cur);\r\n          b = utils.xprod(constraint[0], dk);\r\n          c = utils.xprod(constraint[1], cur);\r\n          d = utils.xprod(constraint[1], dk);\r\n\r\n          j = 10000000;\r\n\r\n          if (b < 0) {\r\n            j = Math.floor(a / -b);\r\n          }\r\n          if (d > 0) {\r\n            j = Math.min(j, Math.floor(-c / d));\r\n          }\r\n\r\n          pivk[i] = utils.mod(k1+j,n);\r\n        }\r\n      }\r\n\r\n      j=pivk[n-1];\r\n      path.lon[n-1]=j;\r\n      for (i=n-2; i>=0; i--) {\r\n        if (utils.cyclic(i+1,pivk[i],j)) {\r\n          j=pivk[i];\r\n        }\r\n        path.lon[i]=j;\r\n      }\r\n\r\n      for (i=n-1; utils.cyclic(utils.mod(i+1,n),j,path.lon[i]); i--) {\r\n        path.lon[i] = j;\r\n      }\r\n    }\r\n\r\n    function bestPolygon(path) {\r\n\r\n      function penalty3(path, i, j) {\r\n\r\n        var n = path.len, pt = path.pt, sums = path.sums;\r\n        var x, y, xy, x2, y2,\r\n          k, a, b, c, s,\r\n          px, py, ex, ey,\r\n          r = 0;\r\n        if (j>=n) {\r\n          j -= n;\r\n          r = 1;\r\n        }\r\n\r\n        if (r === 0) {\r\n          x = sums[j+1].x - sums[i].x;\r\n          y = sums[j+1].y - sums[i].y;\r\n          x2 = sums[j+1].x2 - sums[i].x2;\r\n          xy = sums[j+1].xy - sums[i].xy;\r\n          y2 = sums[j+1].y2 - sums[i].y2;\r\n          k = j+1 - i;\r\n        } else {\r\n          x = sums[j+1].x - sums[i].x + sums[n].x;\r\n          y = sums[j+1].y - sums[i].y + sums[n].y;\r\n          x2 = sums[j+1].x2 - sums[i].x2 + sums[n].x2;\r\n          xy = sums[j+1].xy - sums[i].xy + sums[n].xy;\r\n          y2 = sums[j+1].y2 - sums[i].y2 + sums[n].y2;\r\n          k = j+1 - i + n;\r\n        }\r\n\r\n        px = (pt[i].x + pt[j].x) / 2.0 - pt[0].x;\r\n        py = (pt[i].y + pt[j].y) / 2.0 - pt[0].y;\r\n        ey = (pt[j].x - pt[i].x);\r\n        ex = -(pt[j].y - pt[i].y);\r\n\r\n        a = ((x2 - 2*x*px) / k + px*px);\r\n        b = ((xy - x*py - y*px) / k + px*py);\r\n        c = ((y2 - 2*y*py) / k + py*py);\r\n\r\n        s = ex*ex*a + 2*ex*ey*b + ey*ey*c;\r\n\r\n        return Math.sqrt(s);\r\n      }\r\n\r\n      var i, j, m, k,\r\n      n = path.len,\r\n      pen = new Array(n + 1),\r\n      prev = new Array(n + 1),\r\n      clip0 = new Array(n),\r\n      clip1 = new Array(n + 1),\r\n      seg0 = new Array (n + 1),\r\n      seg1 = new Array(n + 1),\r\n      thispen, best, c;\r\n\r\n      for (i=0; i<n; i++) {\r\n        c = utils.mod(path.lon[utils.mod(i-1,n)]-1,n);\r\n        if (c == i) {\r\n          c = utils.mod(i+1,n);\r\n        }\r\n        if (c < i) {\r\n          clip0[i] = n;\r\n        } else {\r\n          clip0[i] = c;\r\n        }\r\n      }\r\n\r\n      j = 1;\r\n      for (i=0; i<n; i++) {\r\n        while (j <= clip0[i]) {\r\n          clip1[j] = i;\r\n          j++;\r\n        }\r\n      }\r\n\r\n      i = 0;\r\n      for (j=0; i<n; j++) {\r\n        seg0[j] = i;\r\n        i = clip0[i];\r\n      }\r\n      seg0[j] = n;\r\n      m = j;\r\n\r\n      i = n;\r\n      for (j=m; j>0; j--) {\r\n        seg1[j] = i;\r\n        i = clip1[i];\r\n      }\r\n      seg1[0] = 0;\r\n\r\n      pen[0]=0;\r\n      for (j=1; j<=m; j++) {\r\n        for (i=seg1[j]; i<=seg0[j]; i++) {\r\n          best = -1;\r\n          for (k=seg0[j-1]; k>=clip1[i]; k--) {\r\n            thispen = penalty3(path, k, i) + pen[k];\r\n            if (best < 0 || thispen < best) {\r\n              prev[i] = k;\r\n              best = thispen;\r\n            }\r\n          }\r\n          pen[i] = best;\r\n        }\r\n      }\r\n      path.m = m;\r\n      path.po = new Array(m);\r\n\r\n      for (i=n, j=m-1; i>0; j--) {\r\n        i = prev[i];\r\n        path.po[j] = i;\r\n      }\r\n    }\r\n\r\n    function adjustVertices(path) {\r\n\r\n      function pointslope(path, i, j, ctr, dir) {\r\n\r\n        var n = path.len, sums = path.sums,\r\n          x, y, x2, xy, y2,\r\n          k, a, b, c, lambda2, l, r=0;\r\n\r\n        while (j>=n) {\r\n          j-=n;\r\n          r+=1;\r\n        }\r\n        while (i>=n) {\r\n          i-=n;\r\n          r-=1;\r\n        }\r\n        while (j<0) {\r\n          j+=n;\r\n          r-=1;\r\n        }\r\n        while (i<0) {\r\n          i+=n;\r\n          r+=1;\r\n        }\r\n\r\n        x = sums[j+1].x-sums[i].x+r*sums[n].x;\r\n        y = sums[j+1].y-sums[i].y+r*sums[n].y;\r\n        x2 = sums[j+1].x2-sums[i].x2+r*sums[n].x2;\r\n        xy = sums[j+1].xy-sums[i].xy+r*sums[n].xy;\r\n        y2 = sums[j+1].y2-sums[i].y2+r*sums[n].y2;\r\n        k = j+1-i+r*n;\r\n\r\n        ctr.x = x/k;\r\n        ctr.y = y/k;\r\n\r\n        a = (x2-x*x/k)/k;\r\n        b = (xy-x*y/k)/k;\r\n        c = (y2-y*y/k)/k;\r\n\r\n        lambda2 = (a+c+Math.sqrt((a-c)*(a-c)+4*b*b))/2;\r\n\r\n        a -= lambda2;\r\n        c -= lambda2;\r\n\r\n        if (Math.abs(a) >= Math.abs(c)) {\r\n          l = Math.sqrt(a*a+b*b);\r\n          if (l!==0) {\r\n            dir.x = -b/l;\r\n            dir.y = a/l;\r\n          }\r\n        } else {\r\n          l = Math.sqrt(c*c+b*b);\r\n          if (l!==0) {\r\n            dir.x = -c/l;\r\n            dir.y = b/l;\r\n          }\r\n        }\r\n        if (l===0) {\r\n          dir.x = dir.y = 0;\r\n        }\r\n      }\r\n\r\n      var m = path.m, po = path.po, n = path.len, pt = path.pt,\r\n        x0 = path.x0, y0 = path.y0,\r\n        ctr = new Array(m), dir = new Array(m),\r\n        q = new Array(m),\r\n        v = new Array(3), d, i, j, k, l,\r\n        s = new Point();\r\n\r\n      path.curve = new Curve(m);\r\n\r\n      for (i=0; i<m; i++) {\r\n        j = po[utils.mod(i+1,m)];\r\n        j = utils.mod(j-po[i],n)+po[i];\r\n        ctr[i] = new Point();\r\n        dir[i] = new Point();\r\n        pointslope(path, po[i], j, ctr[i], dir[i]);\r\n      }\r\n\r\n      for (i=0; i<m; i++) {\r\n        q[i] = new Quad();\r\n        d = dir[i].x * dir[i].x + dir[i].y * dir[i].y;\r\n        if (d === 0.0) {\r\n          for (j=0; j<3; j++) {\r\n            for (k=0; k<3; k++) {\r\n              q[i].data[j * 3 + k] = 0;\r\n            }\r\n          }\r\n        } else {\r\n          v[0] = dir[i].y;\r\n          v[1] = -dir[i].x;\r\n          v[2] = - v[1] * ctr[i].y - v[0] * ctr[i].x;\r\n          for (l=0; l<3; l++) {\r\n            for (k=0; k<3; k++) {\r\n              q[i].data[l * 3 + k] = v[l] * v[k] / d;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      var Q, w, dx, dy, det, min, cand, xmin, ymin, z;\r\n      for (i=0; i<m; i++) {\r\n        Q = new Quad();\r\n        w = new Point();\r\n\r\n        s.x = pt[po[i]].x-x0;\r\n        s.y = pt[po[i]].y-y0;\r\n\r\n        j = utils.mod(i-1,m);\r\n\r\n        for (l=0; l<3; l++) {\r\n          for (k=0; k<3; k++) {\r\n            Q.data[l * 3 + k] = q[j].at(l, k) + q[i].at(l, k);\r\n          }\r\n        }\r\n\r\n        while(1) {\r\n\r\n          det = Q.at(0, 0)*Q.at(1, 1) - Q.at(0, 1)*Q.at(1, 0);\r\n          if (det !== 0.0) {\r\n            w.x = (-Q.at(0, 2)*Q.at(1, 1) + Q.at(1, 2)*Q.at(0, 1)) / det;\r\n            w.y = ( Q.at(0, 2)*Q.at(1, 0) - Q.at(1, 2)*Q.at(0, 0)) / det;\r\n            break;\r\n          }\r\n\r\n          if (Q.at(0, 0)>Q.at(1, 1)) {\r\n            v[0] = -Q.at(0, 1);\r\n            v[1] = Q.at(0, 0);\r\n          } else if (Q.at(1, 1)) {\r\n            v[0] = -Q.at(1, 1);\r\n            v[1] = Q.at(1, 0);\r\n          } else {\r\n            v[0] = 1;\r\n            v[1] = 0;\r\n          }\r\n          d = v[0] * v[0] + v[1] * v[1];\r\n          v[2] = - v[1] * s.y - v[0] * s.x;\r\n          for (l=0; l<3; l++) {\r\n            for (k=0; k<3; k++) {\r\n              Q.data[l * 3 + k] += v[l] * v[k] / d;\r\n            }\r\n          }\r\n        }\r\n        dx = Math.abs(w.x-s.x);\r\n        dy = Math.abs(w.y-s.y);\r\n        if (dx <= 0.5 && dy <= 0.5) {\r\n          path.curve.vertex[i] = new Point(w.x+x0, w.y+y0);\r\n          continue;\r\n        }\r\n\r\n        min = utils.quadform(Q, s);\r\n        xmin = s.x;\r\n        ymin = s.y;\r\n\r\n        if (Q.at(0, 0) !== 0.0) {\r\n          for (z=0; z<2; z++) {\r\n            w.y = s.y-0.5+z;\r\n            w.x = - (Q.at(0, 1) * w.y + Q.at(0, 2)) / Q.at(0, 0);\r\n            dx = Math.abs(w.x-s.x);\r\n            cand = utils.quadform(Q, w);\r\n            if (dx <= 0.5 && cand < min) {\r\n              min = cand;\r\n              xmin = w.x;\r\n              ymin = w.y;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (Q.at(1, 1) !== 0.0) {\r\n          for (z=0; z<2; z++) {\r\n            w.x = s.x-0.5+z;\r\n            w.y = - (Q.at(1, 0) * w.x + Q.at(1, 2)) / Q.at(1, 1);\r\n            dy = Math.abs(w.y-s.y);\r\n            cand = utils.quadform(Q, w);\r\n            if (dy <= 0.5 && cand < min) {\r\n              min = cand;\r\n              xmin = w.x;\r\n              ymin = w.y;\r\n            }\r\n          }\r\n        }\r\n\r\n        for (l=0; l<2; l++) {\r\n          for (k=0; k<2; k++) {\r\n            w.x = s.x-0.5+l;\r\n            w.y = s.y-0.5+k;\r\n            cand = utils.quadform(Q, w);\r\n            if (cand < min) {\r\n              min = cand;\r\n              xmin = w.x;\r\n              ymin = w.y;\r\n            }\r\n          }\r\n        }\r\n\r\n        path.curve.vertex[i] = new Point(xmin + x0, ymin + y0);\r\n      }\r\n    }\r\n\r\n    function reverse(path) {\r\n      var curve = path.curve, m = curve.n, v = curve.vertex, i, j, tmp;\r\n\r\n      for (i=0, j=m-1; i<j; i++, j--) {\r\n        tmp = v[i];\r\n        v[i] = v[j];\r\n        v[j] = tmp;\r\n      }\r\n    }\r\n\r\n    function smooth(path) {\r\n      var m = path.curve.n, curve = path.curve;\r\n\r\n      var i, j, k, dd, denom, alpha,\r\n        p2, p3, p4;\r\n\r\n      for (i=0; i<m; i++) {\r\n        j = utils.mod(i+1, m);\r\n        k = utils.mod(i+2, m);\r\n        p4 = utils.interval(1/2.0, curve.vertex[k], curve.vertex[j]);\r\n\r\n        denom = utils.ddenom(curve.vertex[i], curve.vertex[k]);\r\n        if (denom !== 0.0) {\r\n          dd = utils.dpara(curve.vertex[i], curve.vertex[j], curve.vertex[k]) / denom;\r\n          dd = Math.abs(dd);\r\n          alpha = dd>1 ? (1 - 1.0/dd) : 0;\r\n          alpha = alpha / 0.75;\r\n        } else {\r\n          alpha = 4/3.0;\r\n        }\r\n        curve.alpha0[j] = alpha;\r\n\r\n        if (alpha >= self._params.alphaMax) {\r\n          curve.tag[j] = \"CORNER\";\r\n          curve.c[3 * j + 1] = curve.vertex[j];\r\n          curve.c[3 * j + 2] = p4;\r\n        } else {\r\n          if (alpha < 0.55) {\r\n            alpha = 0.55;\r\n          } else if (alpha > 1) {\r\n            alpha = 1;\r\n          }\r\n          p2 = utils.interval(0.5+0.5*alpha, curve.vertex[i], curve.vertex[j]);\r\n          p3 = utils.interval(0.5+0.5*alpha, curve.vertex[k], curve.vertex[j]);\r\n          curve.tag[j] = \"CURVE\";\r\n          curve.c[3 * j + 0] = p2;\r\n          curve.c[3 * j + 1] = p3;\r\n          curve.c[3 * j + 2] = p4;\r\n        }\r\n        curve.alpha[j] = alpha;\r\n        curve.beta[j] = 0.5;\r\n      }\r\n      curve.alphaCurve = 1;\r\n    }\r\n\r\n    function optiCurve(path) {\r\n\r\n      function opti_penalty(path, i, j, res, opttolerance, convc, areac) {\r\n        var m = path.curve.n, curve = path.curve, vertex = curve.vertex,\r\n          k, k1, k2, conv, i1,\r\n          area, alpha, d, d1, d2,\r\n          p0, p1, p2, p3, pt,\r\n          A, R, A1, A2, A3, A4,\r\n          s, t;\r\n\r\n        if (i==j) {\r\n          return 1;\r\n        }\r\n\r\n        k = i;\r\n        i1 = utils.mod(i+1, m);\r\n        k1 = utils.mod(k+1, m);\r\n        conv = convc[k1];\r\n        if (conv === 0) {\r\n          return 1;\r\n        }\r\n        d = utils.ddist(vertex[i], vertex[i1]);\r\n        for (k=k1; k!=j; k=k1) {\r\n          k1 = utils.mod(k+1, m);\r\n          k2 = utils.mod(k+2, m);\r\n          if (convc[k1] != conv) {\r\n            return 1;\r\n          }\r\n          if (utils.sign(utils.cprod(vertex[i], vertex[i1], vertex[k1], vertex[k2])) !=\r\n              conv) {\r\n            return 1;\r\n          }\r\n          if (utils.iprod1(vertex[i], vertex[i1], vertex[k1], vertex[k2]) <\r\n              d * utils.ddist(vertex[k1], vertex[k2]) * -0.999847695156) {\r\n            return 1;\r\n          }\r\n        }\r\n\r\n        p0 = curve.c[utils.mod(i,m) * 3 + 2].copy();\r\n        p1 = vertex[utils.mod(i+1,m)].copy();\r\n        p2 = vertex[utils.mod(j,m)].copy();\r\n        p3 = curve.c[utils.mod(j,m) * 3 + 2].copy();\r\n\r\n        area = areac[j] - areac[i];\r\n        area -= utils.dpara(vertex[0], curve.c[i * 3 + 2], curve.c[j * 3 + 2])/2;\r\n        if (i>=j) {\r\n          area += areac[m];\r\n        }\r\n\r\n        A1 = utils.dpara(p0, p1, p2);\r\n        A2 = utils.dpara(p0, p1, p3);\r\n        A3 = utils.dpara(p0, p2, p3);\r\n\r\n        A4 = A1+A3-A2;\r\n\r\n        if (A2 == A1) {\r\n          return 1;\r\n        }\r\n\r\n        t = A3/(A3-A4);\r\n        s = A2/(A2-A1);\r\n        A = A2 * t / 2.0;\r\n\r\n        if (A === 0.0) {\r\n          return 1;\r\n        }\r\n\r\n        R = area / A;\r\n        alpha = 2 - Math.sqrt(4 - R / 0.3);\r\n\r\n        res.c[0] = utils.interval(t * alpha, p0, p1);\r\n        res.c[1] = utils.interval(s * alpha, p3, p2);\r\n        res.alpha = alpha;\r\n        res.t = t;\r\n        res.s = s;\r\n\r\n        p1 = res.c[0].copy();\r\n        p2 = res.c[1].copy();\r\n\r\n        res.pen = 0;\r\n\r\n        for (k=utils.mod(i+1,m); k!=j; k=k1) {\r\n          k1 = utils.mod(k+1,m);\r\n          t = utils.tangent(p0, p1, p2, p3, vertex[k], vertex[k1]);\r\n          if (t<-0.5) {\r\n            return 1;\r\n          }\r\n          pt = utils.bezier(t, p0, p1, p2, p3);\r\n          d = utils.ddist(vertex[k], vertex[k1]);\r\n          if (d === 0.0) {\r\n            return 1;\r\n          }\r\n          d1 = utils.dpara(vertex[k], vertex[k1], pt) / d;\r\n          if (Math.abs(d1) > opttolerance) {\r\n            return 1;\r\n          }\r\n          if (utils.iprod(vertex[k], vertex[k1], pt) < 0 ||\r\n              utils.iprod(vertex[k1], vertex[k], pt) < 0) {\r\n            return 1;\r\n          }\r\n          res.pen += d1 * d1;\r\n        }\r\n\r\n        for (k=i; k!=j; k=k1) {\r\n          k1 = utils.mod(k+1,m);\r\n          t = utils.tangent(p0, p1, p2, p3, curve.c[k * 3 + 2], curve.c[k1 * 3 + 2]);\r\n          if (t<-0.5) {\r\n            return 1;\r\n          }\r\n          pt = utils.bezier(t, p0, p1, p2, p3);\r\n          d = utils.ddist(curve.c[k * 3 + 2], curve.c[k1 * 3 + 2]);\r\n          if (d === 0.0) {\r\n            return 1;\r\n          }\r\n          d1 = utils.dpara(curve.c[k * 3 + 2], curve.c[k1 * 3 + 2], pt) / d;\r\n          d2 = utils.dpara(curve.c[k * 3 + 2], curve.c[k1 * 3 + 2], vertex[k1]) / d;\r\n          d2 *= 0.75 * curve.alpha[k1];\r\n          if (d2 < 0) {\r\n            d1 = -d1;\r\n            d2 = -d2;\r\n          }\r\n          if (d1 < d2 - opttolerance) {\r\n            return 1;\r\n          }\r\n          if (d1 < d2) {\r\n            res.pen += (d1 - d2) * (d1 - d2);\r\n          }\r\n        }\r\n\r\n        return 0;\r\n      }\r\n\r\n      var curve = path.curve, m = curve.n, vert = curve.vertex,\r\n          pt = new Array(m + 1),\r\n          pen = new Array(m + 1),\r\n          len = new Array(m + 1),\r\n          opt = new Array(m + 1),\r\n          om, i,j,r,\r\n          o = new Opti(), p0,\r\n          i1, area, alpha, ocurve,\r\n          s, t;\r\n\r\n      var convc = new Array(m), areac = new Array(m + 1);\r\n\r\n      for (i=0; i<m; i++) {\r\n        if (curve.tag[i] == \"CURVE\") {\r\n          convc[i] = utils.sign(utils.dpara(vert[utils.mod(i-1,m)], vert[i], vert[utils.mod(i+1,m)]));\r\n        } else {\r\n          convc[i] = 0;\r\n        }\r\n      }\r\n\r\n      area = 0.0;\r\n      areac[0] = 0.0;\r\n      p0 = curve.vertex[0];\r\n      for (i=0; i<m; i++) {\r\n        i1 = utils.mod(i+1, m);\r\n        if (curve.tag[i1] == \"CURVE\") {\r\n          alpha = curve.alpha[i1];\r\n          area += 0.3 * alpha * (4-alpha) *\r\n              utils.dpara(curve.c[i * 3 + 2], vert[i1], curve.c[i1 * 3 + 2])/2;\r\n          area += utils.dpara(p0, curve.c[i * 3 + 2], curve.c[i1 * 3 + 2])/2;\r\n        }\r\n        areac[i+1] = area;\r\n      }\r\n\r\n      pt[0] = -1;\r\n      pen[0] = 0;\r\n      len[0] = 0;\r\n\r\n\r\n      for (j=1; j<=m; j++) {\r\n        pt[j] = j-1;\r\n        pen[j] = pen[j-1];\r\n        len[j] = len[j-1]+1;\r\n\r\n        for (i=j-2; i>=0; i--) {\r\n          r = opti_penalty(path, i, utils.mod(j,m), o, self._params.optTolerance, convc,\r\n              areac);\r\n          if (r) {\r\n            break;\r\n          }\r\n            if (len[j] > len[i]+1 ||\r\n                (len[j] == len[i]+1 && pen[j] > pen[i] + o.pen)) {\r\n              pt[j] = i;\r\n              pen[j] = pen[i] + o.pen;\r\n              len[j] = len[i] + 1;\r\n              opt[j] = o;\r\n              o = new Opti();\r\n            }\r\n        }\r\n      }\r\n      om = len[m];\r\n      ocurve = new Curve(om);\r\n      s = new Array(om);\r\n      t = new Array(om);\r\n\r\n      j = m;\r\n      for (i=om-1; i>=0; i--) {\r\n        if (pt[j]==j-1) {\r\n          ocurve.tag[i]       = curve.tag[utils.mod(j,m)];\r\n          ocurve.c[i * 3 + 0] = curve.c[utils.mod(j,m) * 3 + 0];\r\n          ocurve.c[i * 3 + 1] = curve.c[utils.mod(j,m) * 3 + 1];\r\n          ocurve.c[i * 3 + 2] = curve.c[utils.mod(j,m) * 3 + 2];\r\n          ocurve.vertex[i]    = curve.vertex[utils.mod(j,m)];\r\n          ocurve.alpha[i]     = curve.alpha[utils.mod(j,m)];\r\n          ocurve.alpha0[i]    = curve.alpha0[utils.mod(j,m)];\r\n          ocurve.beta[i]      = curve.beta[utils.mod(j,m)];\r\n          s[i] = t[i] = 1.0;\r\n        } else {\r\n          ocurve.tag[i] = \"CURVE\";\r\n          ocurve.c[i * 3 + 0] = opt[j].c[0];\r\n          ocurve.c[i * 3 + 1] = opt[j].c[1];\r\n          ocurve.c[i * 3 + 2] = curve.c[utils.mod(j,m) * 3 + 2];\r\n          ocurve.vertex[i] = utils.interval(opt[j].s, curve.c[utils.mod(j,m) * 3 + 2],\r\n                                       vert[utils.mod(j,m)]);\r\n          ocurve.alpha[i] = opt[j].alpha;\r\n          ocurve.alpha0[i] = opt[j].alpha;\r\n          s[i] = opt[j].s;\r\n          t[i] = opt[j].t;\r\n        }\r\n        j = pt[j];\r\n      }\r\n\r\n      for (i=0; i<om; i++) {\r\n        i1 = utils.mod(i+1,om);\r\n        ocurve.beta[i] = s[i] / (s[i] + t[i1]);\r\n      }\r\n      \r\n      ocurve.alphaCurve = 1;\r\n      path.curve = ocurve;\r\n    }\r\n\r\n    for (var i = 0; i < this._pathlist.length; i++) {\r\n      var path = this._pathlist[i];\r\n      calcSums(path);\r\n      calcLon(path);\r\n      bestPolygon(path);\r\n      adjustVertices(path);\r\n\r\n      if (path.sign === \"-\") {\r\n        reverse(path);\r\n      }\r\n\r\n      smooth(path);\r\n\r\n      if (self._params.optCurve) {\r\n        optiCurve(path);\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Validates some of parameters\r\n   * @param params\r\n   * @private\r\n   */\r\n  _validateParameters: function(params) {\r\n    if (params && params.turnPolicy && SUPPORTED_TURNPOLICY_VALUES.indexOf(params.turnPolicy) === -1) {\r\n      var goodVals = '\\'' + SUPPORTED_TURNPOLICY_VALUES.join('\\', \\'') + '\\'';\r\n\r\n      throw new Error('Bad turnPolicy value. Allowed values are: ' + goodVals);\r\n    }\r\n\r\n    if (params && params.threshold != null && params.threshold !== Potrace.THRESHOLD_AUTO) {\r\n      if (typeof params.threshold !== 'number' || !utils.between(params.threshold, 0, 255)) {\r\n        throw new Error('Bad threshold value. Expected to be an integer in range 0..255');\r\n      }\r\n    }\r\n\r\n    if (params && params.optCurve != null && typeof params.optCurve !== 'boolean') {\r\n      throw new Error('\\'optCurve\\' must be Boolean');\r\n    }\r\n  },\r\n\r\n  _processLoadedImage: function(image) {\r\n    var bitmap = new Bitmap(image.bitmap.width, image.bitmap.height);\r\n    var pixels = image.bitmap.data;\r\n\r\n    image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\r\n      // We want background underneath non-opaque regions to be white\r\n\r\n      var opacity = pixels[idx + 3] / 255,\r\n          r = 255 + (pixels[idx + 0] - 255) * opacity,\r\n          g = 255 + (pixels[idx + 1] - 255) * opacity,\r\n          b = 255 + (pixels[idx + 2] - 255) * opacity;\r\n\r\n      bitmap.data[idx/4] = utils.luminance(r, g, b);\r\n    });\r\n\r\n    this._luminanceData = bitmap;\r\n    this._imageLoaded = true;\r\n  },\r\n\r\n  /**\r\n   * Reads given image. Uses {@link Jimp} under the hood, so target can be whatever Jimp can take\r\n   *\r\n   * @param {string|Buffer|Jimp} target Image source. Could be anything that {@link Jimp} can read (buffer, local path or url). Supported formats are: PNG, JPEG or BMP\r\n   * @param {Function} callback\r\n   */\r\n  loadImage: function(target, callback) {\r\n    var self = this;\r\n    var jobId = {};\r\n\r\n    this._imageLoadingIdentifier = jobId;\r\n    this._imageLoaded = false;\r\n\r\n    if (target instanceof Jimp) {\r\n      this._imageLoadingIdentifier = null;\r\n      this._imageLoaded = true;\r\n      self._processLoadedImage(target);\r\n      callback.call(self, null);\r\n    } else {\r\n      Jimp.read(target, function(err, img) {\r\n        var sourceChanged = self._imageLoadingIdentifier !== jobId;\r\n\r\n        if (sourceChanged) {\r\n          var error = err ? err : new Error('Another image was loaded instead');\r\n          return callback.call(self, error);\r\n        }\r\n\r\n        self._imageLoadingIdentifier = null;\r\n        self._processLoadedImage(img);\r\n        callback.call(self, null);\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Sets algorithm parameters\r\n   * @param {Potrace~Options} newParams\r\n   */\r\n  setParameters: function(newParams) {\r\n    var key, tmpOldVal;\r\n\r\n    this._validateParameters(newParams);\r\n\r\n    for (key in this._params) {\r\n      if (this._params.hasOwnProperty(key) && newParams.hasOwnProperty(key)) {\r\n        tmpOldVal = this._params[key];\r\n        this._params[key] = newParams[key];\r\n\r\n        if (tmpOldVal !== this._params[key] && ['color', 'background'].indexOf(key) === -1) {\r\n          this._processed = false;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Generates just <path> tag without rest of the SVG file\r\n   *\r\n   * @param {String} [fillColor] - overrides color from parameters\r\n   * @returns {String}\r\n   */\r\n  getPathTag: function(fillColor) {\r\n    fillColor = arguments.length === 0 ? this._params.color : fillColor;\r\n\r\n    if (fillColor === Potrace.COLOR_AUTO) {\r\n      fillColor = this._params.blackOnWhite ? 'black' : 'white';\r\n    }\r\n\r\n    if (!this._imageLoaded) {\r\n      throw new Error('Image should be loaded first');\r\n    }\r\n\r\n    if (!this._processed) {\r\n      this._bmToPathlist();\r\n      this._processPath();\r\n      this._processed = true;\r\n    }\r\n\r\n    var tag = '<path d=\"';\r\n\r\n    this._pathlist.forEach(function(path) {\r\n      tag += utils.renderCurve(path.curve, 1);\r\n    });\r\n\r\n    tag += '\" stroke=\"none\" fill=\"' + fillColor + '\" fill-rule=\"evenodd\"/>';\r\n\r\n    return tag;\r\n  },\r\n\r\n  /**\r\n   * Returns <symbol> tag. Always has viewBox specified and comes with no fill color,\r\n   * so it could be changed with <use> tag\r\n   *\r\n   * @param id\r\n   * @returns {string}\r\n   */\r\n  getSymbol: function(id) {\r\n    return '<symbol ' +\r\n      'viewBox=\"0 0 ' + this._luminanceData.width + ' ' + this._luminanceData.height + '\" ' +\r\n      'id=\"' + id + '\">' +\r\n      this.getPathTag('') +\r\n      '</symbol>';\r\n  },\r\n\r\n  /**\r\n   * Generates SVG image\r\n   * @returns {String}\r\n   */\r\n  getSVG: function() {\r\n    var width = this._luminanceData.width;\r\n    var height = this._luminanceData.height;\r\n\r\n    return '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\r\n      'width=\"' + width + '\" ' +\r\n      'height=\"' + height + '\" ' +\r\n      'viewBox=\"0 0 ' + width + ' ' + height + '\" ' +\r\n      'version=\"1.1\">\\n'+\r\n      (this._params.background !== Potrace.COLOR_TRANSPARENT\r\n        ? '\\t<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"' + this._params.background + '\" />\\n'\r\n        : '') +\r\n      '\\t' + this.getPathTag(this._params.color) + '\\n' +\r\n      '</svg>';\r\n  }\r\n};\r\n\r\nmodule.exports = Potrace;\r\n\r\n/**\r\n * Potrace options\r\n *\r\n * @typedef {Object} Potrace~Options\r\n * @property {*}       [turnPolicy]   - how to resolve ambiguities in path decomposition (default Potrace.TURNPOLICY_MINORITY)\r\n * @property {Number}  [turdSize]     - suppress speckles of up to this size (default 2)\r\n * @property {Number}  [alphaMax]     - corner threshold parameter (default 1)\r\n * @property {Boolean} [optCurve]     - curve optimization (default true)\r\n * @property {Number}  [optTolerance] - curve optimization tolerance (default 0.2)\r\n * @property {Number}  [threshold]    - threshold below which color is considered black (0..255, default Potrace.THRESHOLD_AUTO)\r\n * @property {Boolean} [blackOnWhite] - specifies colors by which side from threshold should be traced (default true)\r\n * @property {string}  [color]        - foreground color (default: 'auto' (black or white)) Will be ignored when exporting as <symbol>\r\n * @property {string}  [background]   - background color (default: 'transparent') Will be ignored when exporting as <symbol>\r\n */\r\n\r\n/**\r\n * Jimp module\r\n * @external Jimp\r\n * @see https://www.npmjs.com/package/jimp\r\n */"]},"metadata":{},"sourceType":"script"}